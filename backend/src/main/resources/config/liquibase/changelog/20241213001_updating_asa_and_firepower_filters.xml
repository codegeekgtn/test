<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="20241213001" author="Freddy">

        <sql dbms="postgresql" splitStatements="true" stripComments="true">
        <![CDATA[
        ----Updating CISCO ASA filter----
        UPDATE utm_logstash_filter
            SET logstash_filter='filter {
           
           split {
              field => "message"
              terminator => "<utm-log-separator>"
           }
        
             #Looking for datasource generated by an agent and parse original message
           if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
            grok {
              match => {
                "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
              }
            }
           }
           if [original_log_message] {
            mutate {
              update => { "message" => "%{[original_log_message]}" }
            }
           }
        
           if [message] and "%ASA-" in [message] {
        #......................................................................#
        # Filter version 2.0.2
        # Cisco ASA based on examples provided and https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog.html (january 2022)
        #Using grok to parse priority if present
            grok {
                     match => {
                         "message" => [
                        "(<%{NUMBER:priority}>)?%{GREEDYDATA:cisco_msg_init}"
                         ]
                     }
                 }
        #......................................................................#
        #Using grok to parse date and ip or host if present
            if [cisco_msg_init]{
              grok {
                 match => {
                  "cisco_msg_init" => [ "%{DATA:ciscoSyslogHeader}%%{GREEDYDATA:cisco_message}" ]
                 }
              }
            }
          if [ciscoSyslogHeader]{
              grok {
                 match => {
                  "ciscoSyslogHeader" => [ "%{CISCOTIMESTAMP:tdate}\s%{GREEDYDATA:ciscoHostInfo}",
                  "%{GREEDYDATA:ciscoHostInfo}" ]
                 }
              }
            }
          if [ciscoHostInfo]{
              grok {
                 match => {
                  "ciscoHostInfo" => [ "%{IPORHOST:ciscoDataSource}%{GREEDYDATA:irrelevant}" ]
                 }
              }
            }
        #......................................................................#
        #Generating dataSource field required by CurrelationRulesEngine
        #Checks if ciscoDataSource exists, if true, the dataSource field take its value, if not, take the agent dataSource value
         if ([ciscoDataSource]){
                if [dataSource] {
                  mutate {
                    update => { "dataSource" => "%{[ciscoDataSource]}" }
                  }
                } else {
                  mutate {
                    add_field => { "dataSource" => "%{ciscoDataSource}" }
                  }
                }
         }
        #Finally evaluates to the host variable if can not be calculated
         if ![dataSource] {
            mutate {
               add_field => { "dataSource" => "%{host}" }
             }
         }
        
        #......................................................................# 
        #Generating dataType field required by CurrelationRulesEngine
           mutate {
                  add_field => {
                    "dataType" => "firewall-cisco-asa"
                  }
               }
        #......................................................................#
        #Using grok to parse ASA severity and message ID
            if [cisco_message]{
                grok {
                     match => {
                         "cisco_message" => [
                        "%{GREEDYDATA:cisco_tag}-%{INT:severity}-%{INT:messageid}: %{GREEDYDATA:cisco_msg}"
                         ]
                     }
                 }
            }
        #......................................................................#
        #Begin ASA message processing by ID based on https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog.html
        if [messageid] and [cisco_msg]{
            #......................................................................#
            #ASA-2-106001
            if [messageid]=="106001" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:direction} %{WORD:protocol} connection %{WORD:cisco_action} from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{GREEDYDATA:tcp_flags} on interface %{GREEDYDATA:src_interface}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-2-106017
            if [messageid]=="106017" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:cisco_action} IP due to %{GREEDYDATA:event_description} from %{GREEDYDATA:src_ip} to %{IPORHOST:dst_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-1-106021
            if [messageid]=="106021" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:cisco_action} protocol reverse path check from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-2-106101
            if [messageid]=="106101" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Number of cached %{GREEDYDATA:cisco_action} for ACL log has reached limit(\s)?\(%{INT:num_flows}(\s)?\)%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-6-106102,106103 
            if [messageid]=="106102" or [messageid]=="106103"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "access-list %{GREEDYDATA:access_list} %{WORD:cisco_action} %{WORD:protocol} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip}(\s)?\((\s)?%{INT:src_port}(\s)?\)(\s)?->(\s)?%{DATA:dst_interface}/%{IPORHOST:dst_ip}(\s)?\((\s)?%{INT:dst_port}(\s)?\) hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}",
                            "access-list %{GREEDYDATA:access_list} %{WORD:cisco_action} %{WORD:protocol} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip} %{INT:src_port} %{DATA:dst_interface}/%{IPORHOST:dst_ip} %{INT:dst_port} hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    if [cisco_action]{
                        if [cisco_action] =~/(Permitted|permitted)/ {
                            mutate {
                                add_field => { "[logx][utm][action]" => "Success" }
                            }
                        }
                    }
            }
            #......................................................................#
            #ASA-4-109017 
            if [messageid]=="109017"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "User at %{GREEDYDATA:src_ip} exceeded auth proxy connection limit(\s)?\(%{GREEDYDATA:limit}(\s)?\)%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-109101,109102,109103
            if [messageid]=="109101" or [messageid]=="109102" or [messageid]=="109103"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Received CoA %{WORD:cisco_action} request from %{IPORHOST:src_ip} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), with audit-session-id: %{GREEDYDATA:audit_session_id}",
                            "Received CoA %{WORD:cisco_action} from %{IPORHOST:src_ip}, but cannot find named session %{GREEDYDATA:audit_session_id}",
                            "CoA %{WORD:cisco_action} from %{IPORHOST:src_ip} failed for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), with session ID: %{GREEDYDATA:audit_session_id}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-109201 to 109213
            if [messageid]>="109201" and [messageid]<="109213"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "UAUTH(:)? Session(\s|=)%{GREEDYDATA:session}, User(\s|=)(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), Assigned IP(\s|=)%{IPORHOST:src_ip}, %{GREEDYDATA:cisco_action}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113004
            if [messageid]=="113004"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA user %{WORD:aaa_type} Successful : server = %{GREEDYDATA:src_ip} : user = %{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113005
            if [messageid]=="113005"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA user authentication Rejected(\s)?:(\s)?reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?(server|Server)(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?(User|user)(\s)?=(\s)?%{DATA:src_fwuser}(\s)?:(\s)?(User|user) IP(\s)?=(\s)?%{IPORHOST:src_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113008
            if [messageid]=="113008"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA transaction status ACCEPT(\s)?:(\s)?(user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113009
            if [messageid]=="113009"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA retrieved default group policy \(%{GREEDYDATA:policy}\) for (user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}",
                            "AAA retrieved default group policy %{GREEDYDATA:policy} for (user|User) %{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113010
            if [messageid]=="113010"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA challenge received for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) from server %{IPORHOST:src_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113011
            if [messageid]=="113011"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA retrieved user specific group policy %{GREEDYDATA:policy} for user %{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113012
            if [messageid]=="113012"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA user authentication Successful(\s)?: local database(\s)?: user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113013
            if [messageid]=="113013"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA unable to complete the request Error(\s)?:(\s)?reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113014
            if [messageid]=="113014"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA authentication server not accessible(\s)?: server(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113015, 113017
            if [messageid]=="113015" or [messageid]=="113017"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "(AAA user authentication Rejected|AAA credentials rejected)(\s)?: reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?local database(\s)?:(\s)?user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113016
            if [messageid]=="113016"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "AAA credentials rejected(\s)?: reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?server(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113019
            if [messageid]=="113019"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group(\s)?=(\s)?%{GREEDYDATA:group}(\s)?,(\s)?Username(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?,(\s)?Session disconnected.(\s)?Session Type:(\s)?%{GREEDYDATA:session_type}(\s)?,(\s)?Duration:(\s)?%{GREEDYDATA:duration}(\s)?,(\s)?Bytes xmt:(\s)?%{INT:bytes_xmt}(\s)?,(\s)?Bytes rcv:(\s)?%{INT:bytes_rcv}(\s)?,(\s)?Reason:(\s)?%{GREEDYDATA:reason}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-113031,113032,113033
            if [messageid]=="113031" or [messageid]=="113032" or [messageid]=="113033"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group %{GREEDYDATA:group} User (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect (vpn-filter|ipv6-vpn-filter) %{GREEDYDATA:filter} is an (IPv6|IPv4) ACL; ACL not applied.",
                            "Group %{GREEDYDATA:group} User (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect session not allowed.(\s)?ACL parse error."
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-113034,113035,113036,113038,113039
            if [messageid]>="113034" and [messageid]<="113039" and [messageid]!="113037"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    if [messageid] != "113036" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-113042
            if [messageid]=="113042"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "CoA: Non-HTTP connection from %{GREEDYDATA:src_interface}(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}(\s)?:(\s)?%{IPORHOST:dst_ip}(\s)?/%{INT:dst_port} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) at %{IPORHOST:client_ip} %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-201003
            if [messageid]=="201003"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Embryonic limit exceeded %{INT:num_conns}(\s)?/%{INT:limit} for %{IPORHOST:src_ip}(\s)?/%{INT:src_port} \(%{IPORHOST:global_ip}(\s)?\) %{IPORHOST:dst_ip}(\s)?/%{INT:dst_port} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-209003
            if [messageid]=="209003"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Fragment database limit of %{INT:limit} exceeded:(\s)?src(\s)?=(\s)?%{DATA:src_ip}(\s)?,(\s)?dest(\s)?=(\s)?%{DATA:dst_ip}(\s)?,(\s)?proto(\s)?=(\s)?%{DATA:protocol}(\s)?,(\s)?id(\s)?=(\s)?%{GREEDYDATA:id}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-316001
            if [messageid]=="316001"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Denied new tunnel to %{IPORHOST:src_ip}%{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-316002
            if [messageid]=="316002"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPN Handle error:(\s)?protocol=%{GREEDYDATA:protocol}(\s)?,(\s)?src %{INT:in_if_num}(\s)?:(\s)?%{IPORHOST:src_ip},(\s)?dst %{INT:out_if_num}(\s)?:(\s)?%{IPORHOST:dst_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302003,302004
            if [messageid]=="302003" or [messageid]=="302004" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "(Built H245 connection|Pre-allocate H323 UDP backconnection) for foreign_address %{IPORHOST:src_ip}(/%{INT:src_port}|/)? (to(\s))?local_address %{IPORHOST:dst_ip}(/%{INT:dst_port}|/)?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302012
            if [messageid]=="302012"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Pre-allocate H225 Call Signalling Connection for faddr %{GREEDYDATA:src_ip}/%{INT:src_port} to laddr %{GREEDYDATA:dst_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302013
            if [messageid]=="302013"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:direction} (Probe)?(\s)?%{WORD:protocol} %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\((''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\((''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302014
            if [messageid]=="302014"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown (Probe)?(\s)?%{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302015
            if [messageid]=="302015"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302016
            if [messageid]=="302016"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302017
            if [messageid]=="302017"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302018
            if [messageid]=="302018"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302020
            if [messageid]=="302020"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
                            "Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip}) (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302021
            if [messageid]=="302021"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
                            "Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302022,302024,302026
            if [messageid]=="302022" or [messageid]=="302024" or [messageid]=="302026" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?",
                            "Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?\)(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302023,302025,302027
            if [messageid]=="302023" or [messageid]=="302025" or [messageid]=="302027"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration} forwarded bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302033,302034
            if [messageid]=="302033" or [messageid]=="302034" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "(Pre-allocated|Unable to pre-allocate) H323 GUP Connection for faddr %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to laddr %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    if [messageid] == "302033" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-302035
            if [messageid]=="302035" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:toEnd})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
                    #Decoding user optional of the source interface
                    if [info_user1] {
                    grok {
                        match => {
                            "info_user1" => [
                            "(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding user optional of the destination interface
                    if [info_user2] {
                    grok {
                        match => {
                            "info_user2" => [
                            "(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding reason and emitter user
                    if [toEnd]{
                        if "(" in [toEnd] {
                        grok {
                            match => {
                                "toEnd" => [
                                "(\s)?\((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
                                ]
                            }
                        }
                        }
                    }			
                    #Finally deleting unnecessary fields
                    mutate {
                        remove_field => ["info_user1","info_user2","toEnd"]
                    }
            }
            #......................................................................#
            #ASA-302036
            if [messageid]=="302036" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reasonToEnd}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
                    #Decoding user optional of the source interface
                    if [info_user1] {
                    grok {
                        match => {
                            "info_user1" => [
                            "(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding user optional of the destination interface
                    if [info_user2] {
                    grok {
                        match => {
                            "info_user2" => [
                            "(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding reason and emitter user
                    if [reasonToEnd]{
                        if "(" in [reasonToEnd] {
                        grok {
                            match => {
                                "reasonToEnd" => [
                                "%{GREEDYDATA:reason} \((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
                                ]
                            }
                        }			
                        }else {
                            mutate {
                            add_field => { "reason" => "%{reasonToEnd}" }
                            }
                        }
                    }
                    #Finally deleting unnecessary fields
                    mutate {
                        remove_field => ["info_user1","info_user2","reasonToEnd"]
                    }
            }
            #......................................................................#
            #ASA-302303
            if [messageid]=="302303" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302304
            if [messageid]=="302304" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} %{GREEDYDATA:duration},(\s)?%{INT:bytes_xmt}(\s)?,%{GREEDYDATA:reason}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-302305
            if [messageid]=="302305" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:irrelevant})?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
                    #Decoding user optional of the source interface
                    if [info_user1] {
                    grok {
                        match => {
                            "info_user1" => [
                            "(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding user optional of the destination interface
                    if [info_user2] {
                    grok {
                        match => {
                            "info_user2" => [
                            "(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }			
                    #Finally deleting unnecessary fields
                    mutate {
                        remove_field => ["info_user1","info_user2"]
                    }
            }
            #......................................................................#
            #ASA-302306
            if [messageid]=="302306" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
                    #Decoding user optional of the source interface
                    if [info_user1] {
                    grok {
                        match => {
                            "info_user1" => [
                            "(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Decoding user optional of the destination interface
                    if [info_user2] {
                    grok {
                        match => {
                            "info_user2" => [
                            "(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
                            ]
                        }
                    }			
                    }
                    #Finally deleting unnecessary fields
                    mutate {
                        remove_field => ["info_user1","info_user2","reasonToEnd"]
                    }
            }
            #......................................................................#
            #ASA-305009
            if [messageid]=="305009" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built (dynamic|static) translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{DATA:dst_interface}(\s)?:%{GREEDYDATA:dst_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-305010
            if [messageid]=="305010" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown (dynamic|static) translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip} duration %{GREEDYDATA:duration}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-305011
            if [messageid]=="305011" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Built (dynamic|static) %{WORD:protocol} translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-305012
            if [messageid]=="305012" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown (dynamic|static) %{WORD:protocol} translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #.......................................................................#
            #ASA-322001
            if [messageid]=="322001" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:cisco_action} MAC address %{DATA:src_mac_address},(\s)?%{GREEDYDATA:event_description} on interface %{GREEDYDATA:src_interface}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-322002
            if [messageid]=="322002" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} %{DATA:event_description} for arp %{WORD:http_message} received from host %{DATA:src_mac_address} on interface %{DATA:src_interface}(\s)?.(\s)?This host is advertising MAC Address %{DATA:src_fake_mac_address} for IP Address %{IPORHOST:src_ip}(\s)?,(\s)?which is (statically|dynamically) bound to MAC Address %{GREEDYDATA:src_real_mac_address}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-322003
            if [messageid]=="322003" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} %{DATA:event_description} for arp %{WORD:http_message} received from host %{DATA:src_mac_address} on interface %{DATA:src_interface}(\s)?.(\s)?This host is advertising MAC Address %{DATA:src_fake_mac_address} for IP Address %{IPORHOST:src_ip}(\s)?,(\s)?which %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-400007,400008,400009,400026,400027,400028,400029,400030,400031,400032,400033
            if [messageid]=="400007" or [messageid]=="400008" or [messageid]=="400009" or [messageid]=="400026" or [messageid]=="400027" or [messageid]=="400028" or [messageid]=="400029" or [messageid]=="400030" or [messageid]=="400031" or [messageid]=="400032" or [messageid]=="400033"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPS:%{INT:signature_id} %{DATA:signature_title} from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
                    }
                if [signature_title]{
                    grok {
                        match => {
                            "signature_title" => [
                            "%{WORD:protocol}%{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                }
            }
            #......................................................................#
            #ASA-400023,400024,400041
            if [messageid]=="400023" or [messageid]=="400024" or [messageid]=="400041"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPS:%{INT:signature_id} %{DATA:signature_title} from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
                    }
                if [signature_title]{
                    grok {
                        match => {
                            "signature_title" => [
                            "%{WORD:irrelevant} %{WORD:protocol}%{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                }
            }
            #......................................................................#
            #ASA-400025,400050
            if [messageid]=="400025" or [messageid]=="400050"{
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPS:%{INT:signature_id} %{DATA:signature_title} from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-402114
            if [messageid]=="402114" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC:(\s)?Received an %{WORD:protocol} packet(\s)?\(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} with an %{GREEDYDATA:event_description}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-402115
            if [messageid]=="402115" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC: Received a packet from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} containing %{WORD:act_proto} data instead of %{WORD:protocol}%{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-402116
            if [messageid]=="402116" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC: Received an %{WORD:protocol} packet(\s)?\(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{IPORHOST:dst_ip}(\s)?.%{GREEDYDATA:event_description}.(\s)?The packet specifies its destination as %{GREEDYDATA:pkt_daddr}(\s)?,(\s)?its source as %{GREEDYDATA:pkt_saddr}(\s)?,(\s)?and its protocol as %{GREEDYDATA:pkt_prot}(\s)?.(\s)?The SA specifies its local proxy as %{DATA:id_daddr}(\s)?/%{DATA:id_dmask}(\s)?/%{DATA:id_dprot}(\s)?/%{DATA:dst_port} and its remote proxy as %{DATA:id_saddr}(\s)?/%{DATA:id_smask}(\s)?/%{DATA:id_sprot}(\s)?/%{GREEDYDATA:src_port}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-402117
            if [messageid]=="402117" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC: Received a non-IPsec \(%{WORD:protocol}(\s)?\) packet from %{GREEDYDATA:src_ip} to %{IPORHOST:dst_ip}%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #.......................................................................#
            #ASA-402118
            if [messageid]=="402118" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC: Received an %{WORD:protocol} packet \(SPI=%{DATA:spi}(\s)?,(\s)?sequence number(=)?(\s)?%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{GREEDYDATA:dst_ip} containing an %{GREEDYDATA:event_description} fragment of length %{GREEDYDATA:frag_len} with offset %{GREEDYDATA:frag_offset}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-402119,402120
            if [messageid]=="402119" or [messageid]=="402120" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "IPSEC: Received an %{WORD:protocol} packet \(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{GREEDYDATA:dst_ip} that %{GREEDYDATA:event_description}"
                            ]
                        }
                    }
                    if [messageid]=="402119"{
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-402128
            if [messageid]=="402128" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "CRYPTO: An attempt to allocate a large memory block failed,(\s)?size:(\s)?%{GREEDYDATA:size}(\s)?,(\s)?limit:(\s)?%{GREEDYDATA:limit}"
                            ]
                        }
            }
            }  
            #......................................................................#
            #ASA-405001
            if [messageid]=="405001" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Received %{WORD:protocol} %{WORD:http_message} %{WORD:event_description} from %{IPORHOST:src_ip}(\s)?/%{DATA:src_mac_address} on interface %{DATA:src_interface} with existing ARP entry %{IPORHOST:src_real_ip}(\s)?/%{GREEDYDATA:src_real_mac_address}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-405002
            if [messageid]=="405002" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Received %{GREEDYDATA:event_description} from %{IPORHOST:src_ip}(\s)?/%{DATA:src_mac_address} for %{GREEDYDATA:irrelevant}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-406001
            if [messageid]=="406001" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} port command low port(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-406002
            if [messageid]=="406002" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} port command %{DATA:event_description}:(\s)?IP_address(\s)?\(%{IPORHOST:src_ip}(\s)?\) to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-407002
            if [messageid]=="407002" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Embryonic limit %{INT:num_conns}(\s)?/%{INT:limit} for through connections exceeded.%{IPORHOST:src_ip}(\s)?/%{INT:src_port} to %{GREEDYDATA:global_ip} \(%{IPORHOST:dst_ip}(\s)?\)(\s)?/%{INT:dst_port} on interface %{GREEDYDATA:dst_interface}"
                            ]
                        }
            }
            }
            #......................................................................#
            #ASA-603109
            if [messageid]=="603109" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{WORD:protocol} Tunnel at %{GREEDYDATA:src_interface},(\s)?tunnel-id(\s)?=(\s)?%{INT:tunnel_id}(\s)?,(\s)?remote-peer(\s)?=(\s)?%{IPORHOST:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #ASA-605004
            if [messageid]=="605004" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{GREEDYDATA:event_description} from %{GREEDYDATA:src_ip}/%{INT:src_port} to %{GREEDYDATA:dst_interface}:%{GREEDYDATA:dst_ip}/%{INT:dst_port} for user %{GREEDYDATA:username}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-617100
            if [messageid]=="617100" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown %{INT:num_conns} connection(\s)?(\(s\))? for user %{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-106018
            if [messageid]=="106018" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} packet type %{INT:icmp_type} %{WORD:cisco_action} by %{WORD:direction} list %{GREEDYDATA:access_list} src %{GREEDYDATA:src_ip} dest %{GREEDYDATA:dst_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-106020
            if [messageid]=="106020" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:cisco_action} IP teardrop fragment \(size(\s)?=(\s)?%{INT:fragment_size},(\s)?offset(\s)?=(\s)?%{INT:fragment_offset}\) from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-611301
            if [messageid]=="611301" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with no split tunneling:(\s)?NAT address:(\s)?%{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-611303
            if [messageid]=="611303" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with split tunneling: NAT address:(\s)?%{GREEDYDATA:nat_address} Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-611304
            if [messageid]=="611304" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?%{WORD:protocol} exemption configured for Network Extension Mode with split tunneling: Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-611307
            if [messageid]=="611307" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?Head end:(\s)?%{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-611309
            if [messageid]=="611309" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?%{WORD:cisco_action} from head end and uninstalling previously downloaded policy:(\s)?Head End:(\s)?%{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-611310,611311
            if [messageid]=="611310" or [messageid]=="611311" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VNPClient:(\s)?XAUTH %{WORD:cisco_action}:(\s)?Peer:(\s)?%{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    if [messageid]=="611310" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-611314
            if [messageid]=="611314" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient: Load Balancing Cluster with Virtual IP:(\s)?%{GREEDYDATA:src_ip} has redirected the to server %{GREEDYDATA:dst_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-611315
            if [messageid]=="611315" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?%{WORD:cisco_action} from Load Balancing Cluster member %{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-611318
            if [messageid]=="611318" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient:(\s)?User %{GREEDYDATA:cisco_action}:(\s)?Auth Server IP:(\s)?%{GREEDYDATA:src_ip} Auth Server Port:(\s)?%{INT:dst_port} Idle Timeout: %{INT:timeout}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-710003
            if [messageid]=="710003" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:protocol} %{GREEDYDATA:cisco_action} by ACL from %{IPORHOST:src_ip}(\s)?/%{INT:src_port} to %{WORD:dst_interface}(\s)?(\s)?:(\s)?%{IPORHOST:dst_ip}(\s)?/%{INT:dst_port}%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-713252,713253
            if [messageid]=="713252" or [messageid]=="713253" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group = %{GREEDYDATA:group},(\s)?Username(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{GREEDYDATA:src_ip},(\s)?Integrity Firewall Server is not available.%{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    if [messageid]=="713253" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-716001,716002,716003
            if [messageid]=="716001" or [messageid]=="716002" or [messageid]=="716003" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) WebVPN %{GREEDYDATA:cisco_action}"
                            ]
                        }
                    }
                    mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-716004,716006,716007,716009
            if [messageid]=="716004" or [messageid]=="716006" or [messageid]=="716007" or [messageid]=="716009" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) WebVPN %{GREEDYDATA:cisco_action}"
                            ]
                        }
                    }
                    if [messageid]=="716004" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-716005
            if [messageid]=="716005" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) WebVPN ACL Parse Error:(\s)?%{GREEDYDATA:reason}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-716038
            if [messageid]=="716038" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} %{GREEDYDATA:cisco_action}, Session %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-716039
            if [messageid]=="716039" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{GREEDYDATA:cisco_action},(\s)?group(\s)?=(\s)?%{GREEDYDATA:group} user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?Session %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-719017,719019,719020,719021,719022,719023
            if [messageid]=="719017" or [messageid]=="719019" or [messageid]=="719020" 
            or [messageid]=="719021" or [messageid]=="719022" or [messageid]=="719023" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "WebVPN user(:)?(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{GREEDYDATA:cisco_action}"
                            ]
                        }
                    }
                    if [messageid]=="719020" or [messageid]=="719022" {
                        mutate {
                            add_field => { "[logx][utm][action]" => "Success" }
                        }
                    }
            }
            #......................................................................#
            #ASA-719018
            if [messageid]=="719018" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "WebVPN user:(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) ACL ID %{GREEDYDATA:access_list} not %{GREEDYDATA:irrelevant}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][cisco_asa][reason]" => "ACL not found" }
                    }
            }
            #......................................................................#
            #ASA-719024
            if [messageid]=="719024" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Email Proxy %{GREEDYDATA:cisco_action}:(\s)?session(\s)?=(\s)?%{GREEDYDATA:session} user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) addr(\s)?=(\s)?%{GREEDYDATA:src_ip}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-609002
            if [messageid]=="609002" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Teardown local-host %{GREEDYDATA:zone-name}/\*(\s)?:(\s)?%{GREEDYDATA:src_ip} duration %{GREEDYDATA:duration}"
                            ]
                        }
                    }
                    mutate {
                        add_field => { "[logx][utm][action]" => "Success" }
                    }
            }
            #......................................................................#
            #ASA-611305
            if [messageid]=="611305" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "VPNClient(\s)?:(\s)?DHCP Policy installed(\s)?:(\s)?Primary DNS(\s)?:(\s)?%{GREEDYDATA:primary_dns_ip} Secondary DNS(\s)?:(\s)?%{GREEDYDATA:secondary_dns_ip} Primary WINS(\s)?:(\s)?%{GREEDYDATA:primary_wins_ip} Secondary WINS(\s)?:(\s)?%{GREEDYDATA:secondary_wins_ip}"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-733100
            if [messageid]=="733100" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "(\[)?%{DATA:object}(\])? drop rate(\s)?(-)?%{INT:rate_id} exceeded. Current burst rate is %{INT:current_rate_val} per second(,)?(\s)?(_)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second(,)?(\s)?(_)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-733101
            if [messageid]=="733101" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "%{WORD:object} %{GREEDYDATA:dst_ip} is targeted. Current burst rate is %{INT:current_rate_val} per second,(\s)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second,(\s)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?",
                            "%{WORD:object} %{GREEDYDATA:src_ip} is attacking. Current burst rate is %{INT:current_rate_val} per second,(\s)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second,(\s)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?"
        
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-733102
            if [messageid]=="733102" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Threat-detection add(s)? host %{GREEDYDATA:src_ip} to %{GREEDYDATA:irrelevant}?"
        
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-733103
            if [messageid]=="733103" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "Threat-detection removes host %{GREEDYDATA:src_ip} from %{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
            #......................................................................#
            #ASA-733104,733105
            if [messageid]=="733104" or [messageid]=="733105" {
                    grok {
                        match => {
                            "cisco_msg" => [
                            "TD_SYSLOG_%{DATA:protocol}_%{DATA:cisco_action}_AVERAGE_RATE_EXCEED%{GREEDYDATA:irrelevant}?",
                            "TD_SYSLOG_%{DATA:protocol}_%{DATA:cisco_action}_BURST_RATE_EXCEED%{GREEDYDATA:irrelevant}?"
                            ]
                        }
                    }
            }
        }
        #......................................................................#	   
        #Decoding severity
        if [severity]{
            if [severity] == "1" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Alert"
                    }
                }	
            }
            if [severity] == "2" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Critical"
                    }
                }	
            }
            if [severity] == "3" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Error"
                    }
                }	
            }
            if [severity] == "4" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Warning"
                    }
                }	
            }
            if [severity] == "5" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Notification"
                    }
                }	
            }
            if [severity] == "6" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Informational"
                    }
                }	
            }
            if [severity] == "7" {
                mutate {
                    add_field => {
                        "[logx][cisco_asa][severityLabel]" => "Debugging"
                    }
                }	
            }
        }
        #......................................................................#	   
        #Formatting number values
        if [severity]{
            mutate { convert => {"severity" => "integer"}}
        }
        if [messageid]{
            mutate { convert => {"messageid" => "integer"}}
        }
        if [src_port]{
            mutate { convert => {"src_port" => "integer"}}
        }
        if [dst_port]{
            mutate { convert => {"dst_port" => "integer"}}
        }
        if [hit_count]{
            mutate { convert => {"hit_count" => "integer"}}
        }
        if [bytes_xmt]{
            mutate { convert => {"bytes_xmt" => "integer"}}
        }
        if [bytes_rcv]{
            mutate { convert => {"bytes_rcv" => "integer"}}
        }
        if [in_if_num]{
            mutate { convert => {"in_if_num" => "integer"}}
        }
        if [out_if_num]{
            mutate { convert => {"out_if_num" => "integer"}}
        }
        if [mapped_src_port]{
            mutate { convert => {"mapped_src_port" => "integer"}}
        }
        if [mapped_dst_port]{
            mutate { convert => {"mapped_dst_port" => "integer"}}
        }
        if [icmp_type]{
            mutate { convert => {"icmp_type" => "integer"}}
        }
        if [code]{
            mutate { convert => {"code" => "integer"}}
        }
        if [tunnel_id]{
            mutate { convert => {"tunnel_id" => "integer"}}
        }
        if [num_conns]{
            mutate { convert => {"num_conns" => "integer"}}
        }
        if [fragment_size]{
            mutate { convert => {"fragment_size" => "integer"}}
        }
        if [fragment_offset]{
            mutate { convert => {"fragment_offset" => "integer"}}
        }
        if [timeout]{
            mutate { convert => {"timeout" => "integer"}}
        }
        if [global_port]{
            mutate { convert => {"global_port" => "integer"}}
        }
        #......................................................................#
        #Then add all possible fields to the json tree structure
        
           mutate { 
              rename => { "priority" => "[logx][cisco_asa][priority]" }
              rename => { "severity" => "[logx][cisco_asa][severity]" }
              rename => { "message" => "[logx][cisco_asa][message]" }
              rename => { "messageid" => "[logx][cisco_asa][messageid]" }
              rename => { "cisco_action" => "[logx][cisco_asa][cisco_action]" }
              rename => { "protocol" => "[logx][cisco_asa][proto]" }
              rename => { "src_ip" => "[logx][cisco_asa][src_ip]" }
              rename => { "src_port" => "[logx][cisco_asa][src_port]" }
              rename => { "src_mac_address" => "[logx][cisco_asa][src_mac_address]" }
              rename => { "dst_ip" => "[logx][cisco_asa][dest_ip]" }
              rename => { "dst_port" => "[logx][cisco_asa][dest_port]" }
              rename => { "direction" => "[logx][cisco_asa][direction]" }
              rename => { "src_interface" => "[logx][cisco_asa][src_interface]" }
              rename => { "dst_interface" => "[logx][cisco_asa][dst_interface]" }
              rename => { "tcp_flags" => "[logx][cisco_asa][tcp_flags]" }
              rename => { "event_description" => "[logx][cisco_asa][event_desc]" }
              rename => { "limit" => "[logx][cisco_asa][limit]" }
              rename => { "num_conns" => "[logx][cisco_asa][num_conns]" }
              rename => { "global_ip" => "[logx][cisco_asa][global_ip]" }
              rename => { "spi" => "[logx][cisco_asa][spi]" }
              rename => { "seq_num" => "[logx][cisco_asa][seq_num]" }
              rename => { "username" => "[logx][cisco_asa][src_user]" }
              rename => { "http_message" => "[logx][cisco_asa][http_message]" }
              rename => { "src_real_mac_address" => "[logx][cisco_asa][src_real_mac_address]" }
        
              #New fields from ASA-1-106101
              rename => { "num_flows" => "[logx][cisco_asa][num_flows]" }
        
              #New fields from ASA-6-106102
              rename => { "access_list" => "[logx][cisco_asa][access_list_id]" }
              rename => { "src_fwuser" => "[logx][cisco_asa][src_user]" }
              rename => { "hit_count" => "[logx][cisco_asa][hit_count]" }
        
              #New fields from ASA-4-109017
              rename => { "limit" => "[logx][cisco_asa][limit]" }
              
              #New fields from ASA-109101,109102,109103
              rename => { "audit_session_id" => "[logx][cisco_asa][audit_session_id]" }
              
              #New fields from ASA-109201 to 109213
              rename => { "session" => "[logx][cisco_asa][session]" }
              
              #New fields from ASA-113004
              rename => { "aaa_type" => "[logx][cisco_asa][aaa_type]" }
        
              #New fields from ASA-113009
              rename => { "policy" => "[logx][cisco_asa][policy]" }
              
              #New fields from ASA-113013
              rename => { "reason" => "[logx][cisco_asa][reason]" }
              
              #New fields from ASA-113019
              rename => { "group" => "[logx][cisco_asa][group]" }
              rename => { "session_type" => "[logx][cisco_asa][session_type]" }
              rename => { "duration" => "[logx][cisco_asa][duration]" }
              rename => { "bytes_xmt" => "[logx][cisco_asa][bytes_xmt]" }
              rename => { "bytes_rcv" => "[logx][cisco_asa][bytes_rcv]" }
              
              #New fields from ASA-113031
              rename => { "filter" => "[logx][cisco_asa][filter]" }
              
              #New fields from ASA-113042
              rename => { "client_ip" => "[logx][cisco_asa][client_ip]" }
        
              #New fields from ASA-4-209003
              rename => { "id" => "[logx][cisco_asa][id]" }
              
              #New fields from ASA-316002
              rename => { "in_if_num" => "[logx][cisco_asa][in_if_num]" }
              rename => { "out_if_num" => "[logx][cisco_asa][out_if_num]" }
              
              #New fields from ASA-302002,322003
              rename => { "src_fake_mac_address" => "[logx][cisco_asa][src_fake_mac_address]" }
        
              #New fields from ASA-302013
              rename => { "connection_id" => "[logx][cisco_asa][connection_id]" }
              rename => { "mapped_src_ip" => "[logx][cisco_asa][mapped_src_ip]" }
              rename => { "mapped_src_port" => "[logx][cisco_asa][mapped_src_port]" }
              rename => { "mapped_dst_ip" => "[logx][cisco_asa][mapped_dst_ip]" }
              rename => { "mapped_dst_port" => "[logx][cisco_asa][mapped_dst_port]" }
              rename => { "dst_fwuser" => "[logx][cisco_asa][dst_user]" }
        
              #New fields from ASA-302017
              rename => { "translated_src_ip" => "[logx][cisco_asa][translated_src_ip]" }
              rename => { "translated_dst_ip" => "[logx][cisco_asa][translated_dst_ip]" }
              rename => { "translated_cid" => "[logx][cisco_asa][translated_cid]" }
              rename => { "real_cid" => "[logx][cisco_asa][real_cid]" }
        
              #New fields from ASA-302021
              rename => { "icmp_type" => "[logx][cisco_asa][icmp_type]" }
              rename => { "code" => "[logx][cisco_asa][code]" }
        
              #New fields from ASA-302020
              rename => { "global_port" => "[logx][cisco_asa][global_port]" }
        
              #New fields from ASA-302022
              rename => { "role" => "[logx][cisco_asa][role]" }
        
              #New fields from ASA-305012
              rename => { "acl_name" => "[logx][cisco_asa][access_list_name]" }
        
              #New fields from ASA-400007 to 400009,400023 to 400033,400041,400050
              rename => { "signature_id" => "[logx][cisco_asa][signature_id]" }
              rename => { "signature_title" => "[logx][cisco_asa][signature_title]" }
        
              #New fields from ASA-4-402115
              rename => { "act_proto" => "[logx][cisco_asa][act_proto]" }
        
              #New fields from ASA-4-402116
              rename => { "pkt_daddr" => "[logx][cisco_asa][pkt_daddr]" }
              rename => { "pkt_saddr" => "[logx][cisco_asa][pkt_saddr]" }
              rename => { "pkt_prot" => "[logx][cisco_asa][pkt_prot]" }
              rename => { "id_daddr" => "[logx][cisco_asa][id_daddr]" }
              rename => { "id_dmask" => "[logx][cisco_asa][id_dmask]" }
              rename => { "id_dprot" => "[logx][cisco_asa][id_dprot]" }
              rename => { "id_saddr" => "[logx][cisco_asa][id_saddr]" }
              rename => { "id_smask" => "[logx][cisco_asa][id_smask]" }
              rename => { "id_sprot" => "[logx][cisco_asa][id_sprot]" }
        
              #New fields from ASA-4-402118
              rename => { "frag_len" => "[logx][cisco_asa][frag_len]" }
              rename => { "frag_offset" => "[logx][cisco_asa][frag_offset]" }
        
              #New fields from ASA-5-402128
              rename => { "size" => "[logx][cisco_asa][size]" }
        
              #New fields from ASA-4-405001
              rename => { "src_real_ip" => "[logx][cisco_asa][src_real_ip]" }
        
              #New fields from ASA-603109
              rename => { "tunnel_id" => "[logx][cisco_asa][tunnel_id]" }
        
              #New fields from ASA-106020
              rename => { "fragment_size" => "[logx][cisco_asa][fragment_size]" }
              rename => { "fragment_offset" => "[logx][cisco_asa][fragment_offset]" }
        
              #New fields from ASA-611303
              rename => { "nat_address" => "[logx][cisco_asa][nat_address]" }
              rename => { "src_masc" => "[logx][cisco_asa][src_masc]" }
              rename => { "dst_masc" => "[logx][cisco_asa][dst_masc]" }
        
              #New fields from ASA-611305
              rename => { "primary_dns_ip" => "[logx][cisco_asa][primary_dns_ip]" }
              rename => { "secondary_dns_ip" => "[logx][cisco_asa][secondary_dns_ip]" }
              rename => { "primary_wins_ip" => "[logx][cisco_asa][primary_wins_ip]" }
              rename => { "secondary_wins_ip" => "[logx][cisco_asa][secondary_wins_ip]" }
        
              #New fields from ASA-611318
              rename => { "timeout" => "[logx][cisco_asa][timeout]" }
        
              #New fields from ASA-609002
              rename => { "zone-name" => "[logx][cisco_asa][zone-name]" }
        
              #New fields from ASA-733100,733101
              rename => { "object" => "[logx][cisco_asa][object]" }
              rename => { "rate_id" => "[logx][cisco_asa][rate_id]" }
              rename => { "current_rate_val" => "[logx][cisco_asa][current_rate_val]" }
              rename => { "current_rate_val_max" => "[logx][cisco_asa][current_rate_val_max]" }
              rename => { "average_rate_val" => "[logx][cisco_asa][average_rate_val]" }
              rename => { "average_rate_val_max" => "[logx][cisco_asa][average_rate_val_max]" }
              rename => { "total_cnt" => "[logx][cisco_asa][total_cnt]" }
        
           }
           
           #Finally, remove unnecessary fields
           mutate {
              remove_field => ["@version","path","cisco_tag","cisco_msg_init","cisco_message","tdate",
              "irrelevant","cisco_msg","ciscoDataSource", "ciscoSyslogHeader", "ciscoHostInfo"]
           }		
          }
           #Also, remove unwanted fields if the message not match with conditions
           mutate {
              remove_field => ["original_log_message","headers"]
           }
        }
        ',filter_version='2.0.2'
            WHERE id=301;
            
        ----Updating CISCO FIREPOWER filter----
    UPDATE utm_logstash_filter
	SET logstash_filter='filter {

   split {
      field => "message"
      terminator => "<utm-log-separator>"
   }

   #Looking for datasource generated by an agent and parse original message
   if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
    grok {
      match => {
        "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
      }
    }
   }
   if [original_log_message] {
    mutate {
      update => { "message" => "%{[original_log_message]}" }
    }
   }

   if [message] and "%FTD-" in [message] {
#......................................................................#
# Filter version 2.0.2
# Cisco Firepower based on https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html (january 2022)
#Using grok to parse priority if present
      grok {
       match => {
        "message" => [
          "(<%{NUMBER:priority}>)?%{GREEDYDATA:cisco_msg_init}"
        ]
       }
      }
#......................................................................#
#Using grok to parse date and ip or host if present
  if [cisco_msg_init]{
      grok {
         match => {
          "cisco_msg_init" => [ "%{DATA:ciscoSyslogHeader}%%{GREEDYDATA:cisco_message}" ]
         }
      }
	}
  if [ciscoSyslogHeader]{
      grok {
         match => {
          "ciscoSyslogHeader" => [ "%{CISCOTIMESTAMP:tdate}\s%{GREEDYDATA:ciscoHostInfo}",
          "%{GREEDYDATA:ciscoHostInfo}" ]
         }
      }
	}
  if [ciscoHostInfo]{
      grok {
         match => {
          "ciscoHostInfo" => [ "%{IPORHOST:ciscoDataSource}%{GREEDYDATA:irrelevant}" ]
         }
      }
	}
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if ciscoDataSource exists, if true, the dataSource field take its value, if not, take the agent dataSource value
 if ([ciscoDataSource]){
        if [dataSource] {
          mutate {
            update => { "dataSource" => "%{[ciscoDataSource]}" }
          }
        } else {
          mutate {
            add_field => { "dataSource" => "%{ciscoDataSource}" }
          }
        }
 }
#Finally evaluates to the host variable if can not be calculated
 if ![dataSource] {
    mutate {
       add_field => { "dataSource" => "%{host}" }
     }
 }

#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
   mutate {
     add_field => {
       "dataType" => "firewall-cisco-firepower"
     }
   }
#......................................................................#
#Using grok to parse Firepower severity and message ID
	if [cisco_message]{
        grok {
 			match => {
 				"cisco_message" => [
				"%{GREEDYDATA:cisco_tag}-%{INT:severity}-%{INT:messageid}: %{GREEDYDATA:cisco_msg}"
 				]
 			}
 		}
	}
#......................................................................#
#Begin Firepower message processing by ID based on https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html (january 2022)
if [messageid] and [cisco_msg]{
	#......................................................................#
	#FTD-2-106001
	if [messageid]=="106001" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:direction} %{WORD:protocol} connection %{WORD:cisco_action} from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{GREEDYDATA:tcp_flags} on interface %{GREEDYDATA:src_interface}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-2-106017
	if [messageid]=="106017" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:cisco_action} IP due to %{GREEDYDATA:event_description} from %{GREEDYDATA:src_ip} to %{IPORHOST:dst_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-2-106101
	if [messageid]=="106101" {
			grok {
				match => {
					"cisco_msg" => [
					"Number of cached %{GREEDYDATA:cisco_action} for ACL log has reached limit(\s)?\(%{INT:num_flows}(\s)?\)%{GREEDYDATA:irrelevant}?"
					]
				}
			}
	}
	#......................................................................#
	#FTD-6-106102,106103
	if [messageid]=="106102" or [messageid]=="106103"{
			grok {
				match => {
					"cisco_msg" => [
					"access-list %{GREEDYDATA:access_list} %{WORD:cisco_action} %{WORD:protocol} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip}(\s)?\((\s)?%{INT:src_port}(\s)?\)(\s)?->(\s)?%{DATA:dst_interface}/%{IPORHOST:dst_ip}(\s)?\((\s)?%{INT:dst_port}(\s)?\) hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}",
					"access-list %{GREEDYDATA:access_list} %{WORD:cisco_action} %{WORD:protocol} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip} %{INT:src_port} %{DATA:dst_interface}/%{IPORHOST:dst_ip} %{INT:dst_port} hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}"
					]
				}
			}
			if [cisco_action]{
				if [cisco_action] =~/(Permitted|permitted)/ {
					mutate {
						add_field => { "[logx][utm][action]" => "Success" }
					}
				}
			}
	}
	#......................................................................#
	#FTD-109101,109102,109103
	if [messageid]=="109101" or [messageid]=="109102" or [messageid]=="109103"{
			grok {
				match => {
					"cisco_msg" => [
					"Received CoA %{WORD:cisco_action} request from %{IPORHOST:src_ip} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), with audit-session-id: %{GREEDYDATA:audit_session_id}",
					"Received CoA %{WORD:cisco_action} from %{IPORHOST:src_ip}, but cannot find named session %{GREEDYDATA:audit_session_id}",
					"CoA %{WORD:cisco_action} from %{IPORHOST:src_ip} failed for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), with session ID: %{GREEDYDATA:audit_session_id}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-109201 to 109213
	if [messageid]>="109201" and [messageid]<="109213"{
			grok {
				match => {
					"cisco_msg" => [
					"UAUTH(:)? Session(\s|=)%{GREEDYDATA:session}, User(\s|=)(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}), Assigned IP(\s|=)%{IPORHOST:src_ip}, %{GREEDYDATA:cisco_action}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113004
	if [messageid]=="113004"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA user %{WORD:aaa_type} Successful : server = %{IPORHOST:src_ip} : user = %{GREEDYDATA:src_fwuser}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113005
	if [messageid]=="113005"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA user authentication Rejected(\s)?:(\s)?reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?(server|Server)(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?(User|user)(\s)?=(\s)?%{DATA:src_fwuser}(\s)?:(\s)?(User|user) IP(\s)?=(\s)?%{IPORHOST:src_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113008
	if [messageid]=="113008"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA transaction status ACCEPT(\s)?:(\s)?(user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113009
	if [messageid]=="113009"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA retrieved default group policy \(%{GREEDYDATA:policy}\) for (user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}",
					"AAA retrieved default group policy %{GREEDYDATA:policy} for (user|User) %{GREEDYDATA:src_fwuser}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113010
	if [messageid]=="113010"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA challenge received for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) from server %{IPORHOST:src_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113011
	if [messageid]=="113011"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA retrieved user specific group policy %{GREEDYDATA:policy} for user %{GREEDYDATA:src_fwuser}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113012
	if [messageid]=="113012"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA user authentication Successful(\s)?: local database(\s)?: user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113013
	if [messageid]=="113013"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA unable to complete the request Error(\s)?:(\s)?reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113014
	if [messageid]=="113014"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA authentication server not accessible(\s)?: server(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113015, 113017
	if [messageid]=="113015" or [messageid]=="113017"{
			grok {
				match => {
					"cisco_msg" => [
					"(AAA user authentication Rejected|AAA credentials rejected)(\s)?: reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?local database(\s)?:(\s)?user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113016
	if [messageid]=="113016"{
			grok {
				match => {
					"cisco_msg" => [
					"AAA credentials rejected(\s)?: reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?server(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-113019
	if [messageid]=="113019"{
			grok {
				match => {
					"cisco_msg" => [
					"Group(\s)?=(\s)?%{GREEDYDATA:group}(\s)?,(\s)?Username(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?,(\s)?Session disconnected.(\s)?Session Type:(\s)?%{GREEDYDATA:session_type}(\s)?,(\s)?Duration:(\s)?%{GREEDYDATA:duration}(\s)?,(\s)?Bytes xmt:(\s)?%{INT:bytes_xmt}(\s)?,(\s)?Bytes rcv:(\s)?%{INT:bytes_rcv}(\s)?,(\s)?Reason:(\s)?%{GREEDYDATA:reason}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-113031,113032,113033
	if [messageid]=="113031" or [messageid]=="113032" or [messageid]=="113033"{
			grok {
				match => {
					"cisco_msg" => [
					"Group %{GREEDYDATA:group} User (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect (vpn-filter|ipv6-vpn-filter) %{GREEDYDATA:filter} is an (IPv6|IPv4) ACL; ACL not applied.",
					"Group %{GREEDYDATA:group} User (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect session not allowed.(\s)?ACL parse error."
					]
				}
			}
	}
	#......................................................................#
	#FTD-113034,113035,113036,113038,113039
	if [messageid]>="113034" and [messageid]<="113039" and [messageid]!="113037"{
			grok {
				match => {
					"cisco_msg" => [
					"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) %{GREEDYDATA:irrelevant}"
					]
				}
			}
			if [messageid] != "113036" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-113042
	if [messageid]=="113042"{
			grok {
				match => {
					"cisco_msg" => [
					"CoA: Non-HTTP connection from %{GREEDYDATA:src_interface}(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}(\s)?:(\s)?%{IPORHOST:dst_ip}(\s)?/%{INT:dst_port} for user (''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) at %{IPORHOST:client_ip} %{GREEDYDATA:irrelevant}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-201003
	if [messageid]=="201003"{
			grok {
				match => {
					"cisco_msg" => [
					"Embryonic limit exceeded %{INT:num_conns}(\s)?/%{INT:limit} for %{IPORHOST:src_ip}(\s)?/%{INT:src_port} \(%{IPORHOST:global_ip}(\s)?\) %{IPORHOST:dst_ip}(\s)?/%{INT:dst_port} on interface %{GREEDYDATA:dst_interface}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-209003
	if [messageid]=="209003"{
			grok {
				match => {
					"cisco_msg" => [
					"Fragment database limit of %{INT:limit} exceeded:(\s)?src(\s)?=(\s)?%{DATA:src_ip}(\s)?,(\s)?dest(\s)?=(\s)?%{DATA:dst_ip}(\s)?,(\s)?proto(\s)?=(\s)?%{DATA:protocol}(\s)?,(\s)?id(\s)?=(\s)?%{GREEDYDATA:id}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-316001
	if [messageid]=="316001"{
			grok {
				match => {
					"cisco_msg" => [
					"Denied new tunnel to %{IPORHOST:src_ip}%{GREEDYDATA:irrelevant}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-316002
	if [messageid]=="316002"{
			grok {
				match => {
					"cisco_msg" => [
					"VPN Handle error:(\s)?protocol=%{GREEDYDATA:protocol}(\s)?,(\s)?src %{INT:in_if_num}(\s)?:(\s)?%{IPORHOST:src_ip},(\s)?dst %{INT:out_if_num}(\s)?:(\s)?%{IPORHOST:dst_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302003,302004
	if [messageid]=="302003" or [messageid]=="302004" {
			grok {
				match => {
					"cisco_msg" => [
					"(Built H245 connection|Pre-allocate H323 UDP backconnection) for foreign_address %{IPORHOST:src_ip}(/%{INT:src_port}|/)? (to(\s))?local_address %{IPORHOST:dst_ip}(/%{INT:dst_port}|/)?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302012
	if [messageid]=="302012"{
			grok {
				match => {
					"cisco_msg" => [
					"Pre-allocate H225 Call Signalling Connection for faddr %{GREEDYDATA:src_ip}/%{INT:src_port} to laddr %{GREEDYDATA:dst_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302013
	if [messageid]=="302013"{
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:direction} (Probe)?(\s)?%{WORD:protocol} %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\((''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\((''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302014
	if [messageid]=="302014"{
			grok {
				match => {
					"cisco_msg" => [
					"Teardown (Probe)?(\s)?%{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302015
	if [messageid]=="302015"{
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302016
	if [messageid]=="302016"{
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302017
	if [messageid]=="302017"{
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302018
	if [messageid]=="302018"{
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302020
	if [messageid]=="302020"{
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
					"Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip}) (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302021
	if [messageid]=="302021"{
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
					"Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})(\s)?(\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?(''%{DATA:dst_fwuser}''|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302022,302024,302026
	if [messageid]=="302022" or [messageid]=="302024" or [messageid]=="302026" {
			grok {
				match => {
					"cisco_msg" => [
					"Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?",
					"Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?\)(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302023,302025,302027
	if [messageid]=="302023" or [messageid]=="302025" or [messageid]=="302027"{
			grok {
				match => {
					"cisco_msg" => [
					"Teardown stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration} forwarded bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302033,302034
	if [messageid]=="302033" or [messageid]=="302034" {
			grok {
				match => {
					"cisco_msg" => [
					"(Pre-allocated|Unable to pre-allocate) H323 GUP Connection for faddr %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to laddr %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			if [messageid] == "302033" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-302035
	if [messageid]=="302035" {
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:toEnd})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
			#Decoding user optional of the source interface
			if [info_user1] {
			grok {
				match => {
					"info_user1" => [
					"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding user optional of the destination interface
			if [info_user2] {
			grok {
				match => {
					"info_user2" => [
					"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding reason and emitter user
			if [toEnd]{
				if "(" in [toEnd] {
				grok {
					match => {
						"toEnd" => [
						"(\s)?\((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
						]
					}
				}
				}	
			}		
			#Finally deleting unnecessary fields
			mutate {
				remove_field => ["info_user1","info_user2","toEnd"]
			}
	}
	#......................................................................#
	#FTD-302036
	if [messageid]=="302036" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reasonToEnd}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
			#Decoding user optional of the source interface
			if [info_user1] {
			grok {
				match => {
					"info_user1" => [
					"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding user optional of the destination interface
			if [info_user2] {
			grok {
				match => {
					"info_user2" => [
					"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding reason and emitter user
			if [reasonToEnd]{
				if "(" in [reasonToEnd] {
				grok {
					match => {
						"reasonToEnd" => [
						"%{GREEDYDATA:reason} \((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
						]
					}
				}			
				}else {
					mutate {
					add_field => { "reason" => "%{reasonToEnd}" }
					}
				}
			}
			#Finally deleting unnecessary fields
			mutate {
				remove_field => ["info_user1","info_user2","reasonToEnd"]
			}
	}
	#......................................................................#
	#FTD-302303
	if [messageid]=="302303" {
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302304
	if [messageid]=="302304" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} %{GREEDYDATA:duration},(\s)?%{INT:bytes_xmt}(\s)?,%{GREEDYDATA:reason}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-302305
	if [messageid]=="302305" {
			grok {
				match => {
					"cisco_msg" => [
					"Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:irrelevant})?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
			#Decoding user optional of the source interface
			if [info_user1] {
			grok {
				match => {
					"info_user1" => [
					"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding user optional of the destination interface
			if [info_user2] {
			grok {
				match => {
					"info_user2" => [
					"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
					]
				}
			}			
			}			
			#Finally deleting unnecessary fields
			mutate {
				remove_field => ["info_user1","info_user2"]
			}
	}
	#......................................................................#
	#FTD-302306
	if [messageid]=="302306" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
			#Decoding user optional of the source interface
			if [info_user1] {
			grok {
				match => {
					"info_user1" => [
					"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
					]
				}
			}			
			}
			#Decoding user optional of the destination interface
			if [info_user2] {
			grok {
				match => {
					"info_user2" => [
					"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
					]
				}
			}			
			}
			#Finally deleting unnecessary fields
			mutate {
				remove_field => ["info_user1","info_user2","reasonToEnd"]
			}
	}
	#......................................................................#
	#FTD-305009
	if [messageid]=="305009" {
			grok {
				match => {
					"cisco_msg" => [
					"Built (dynamic|static) translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{DATA:dst_interface}(\s)?:%{GREEDYDATA:dst_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-305010
	if [messageid]=="305010" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown (dynamic|static) translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip} duration %{GREEDYDATA:duration}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-305011
	if [messageid]=="305011" {
			grok {
				match => {
					"cisco_msg" => [
					"Built (dynamic|static) %{WORD:protocol} translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-305012
	if [messageid]=="305012" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown (dynamic|static) %{WORD:protocol} translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#.......................................................................#
	#FTD-322001
	if [messageid]=="322001" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:cisco_action} MAC address %{DATA:src_mac_address},(\s)?%{GREEDYDATA:event_description} on interface %{GREEDYDATA:src_interface}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-322002
	if [messageid]=="322002" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} %{DATA:event_description} for arp %{WORD:http_message} received from host %{DATA:src_mac_address} on interface %{DATA:src_interface}(\s)?.(\s)?This host is advertising MAC Address %{DATA:src_fake_mac_address} for IP Address %{IPORHOST:src_ip}(\s)?,(\s)?which is (statically|dynamically) bound to MAC Address %{GREEDYDATA:src_real_mac_address}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-322003
	if [messageid]=="322003" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} %{DATA:event_description} for arp %{WORD:http_message} received from host %{DATA:src_mac_address} on interface %{DATA:src_interface}(\s)?.(\s)?This host is advertising MAC Address %{DATA:src_fake_mac_address} for IP Address %{IPORHOST:src_ip}(\s)?,(\s)?which %{GREEDYDATA:irrelevant}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-402114
	if [messageid]=="402114" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC:(\s)?Received an %{WORD:protocol} packet(\s)?\(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} with an %{GREEDYDATA:event_description}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-402115
	if [messageid]=="402115" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC: Received a packet from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} containing %{WORD:act_proto} data instead of %{WORD:protocol}%{GREEDYDATA:irrelevant}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-402116
	if [messageid]=="402116" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC: Received an %{WORD:protocol} packet(\s)?\(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{IPORHOST:dst_ip}(\s)?.%{GREEDYDATA:event_description}.(\s)?The packet specifies its destination as %{GREEDYDATA:pkt_daddr}(\s)?,(\s)?its source as %{GREEDYDATA:pkt_saddr}(\s)?,(\s)?and its protocol as %{GREEDYDATA:pkt_prot}(\s)?.(\s)?The SA specifies its local proxy as %{DATA:id_daddr}(\s)?/%{DATA:id_dmask}(\s)?/%{DATA:id_dprot}(\s)?/%{DATA:dst_port} and its remote proxy as %{DATA:id_saddr}(\s)?/%{DATA:id_smask}(\s)?/%{DATA:id_sprot}(\s)?/%{GREEDYDATA:src_port}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-402117
	if [messageid]=="402117" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC: Received a non-IPsec \(%{WORD:protocol}(\s)?\) packet from %{GREEDYDATA:src_ip} to %{IPORHOST:dst_ip}%{GREEDYDATA:irrelevant}?"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#.......................................................................#
	#FTD-402118
	if [messageid]=="402118" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC: Received an %{WORD:protocol} packet \(SPI=%{DATA:spi}(\s)?,(\s)?sequence number(=)?(\s)?%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{GREEDYDATA:dst_ip} containing an %{GREEDYDATA:event_description} fragment of length %{GREEDYDATA:frag_len} with offset %{GREEDYDATA:frag_offset}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-402119,402120
	if [messageid]=="402119" or [messageid]=="402120" {
			grok {
				match => {
					"cisco_msg" => [
					"IPSEC: Received an %{WORD:protocol} packet \(SPI=%{DATA:spi}(\s)?,(\s)?sequence number=%{DATA:seq_num}(\s)?\) from %{GREEDYDATA:src_ip} \(%{DATA:username}(\s)?\) to %{GREEDYDATA:dst_ip} that %{GREEDYDATA:event_description}"
					]
				}
			}
			if [messageid]=="402119"{
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-402128
	if [messageid]=="402128" {
			grok {
				match => {
					"cisco_msg" => [
					"CRYPTO: An attempt to allocate a large memory block failed,(\s)?size:(\s)?%{GREEDYDATA:size}(\s)?,(\s)?limit:(\s)?%{GREEDYDATA:limit}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-405001
	if [messageid]=="405001" {
			grok {
				match => {
					"cisco_msg" => [
					"Received %{WORD:protocol} %{WORD:http_message} %{WORD:event_description} from %{IPORHOST:src_ip}(\s)?/%{DATA:src_mac_address} on interface %{DATA:src_interface} with existing ARP entry %{IPORHOST:src_real_ip}(\s)?/%{GREEDYDATA:src_real_mac_address}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-405002
	if [messageid]=="405002" {
			grok {
				match => {
					"cisco_msg" => [
					"Received %{GREEDYDATA:event_description} from %{IPORHOST:src_ip}(\s)?/%{DATA:src_mac_address} for %{GREEDYDATA:irrelevant}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-406001
	if [messageid]=="406001" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} port command low port(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-406002
	if [messageid]=="406002" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} port command %{DATA:event_description}:(\s)?IP_address(\s)?\(%{IPORHOST:src_ip}(\s)?\) to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:dst_interface}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-407002
	if [messageid]=="407002" {
			grok {
				match => {
					"cisco_msg" => [
					"Embryonic limit %{INT:num_conns}(\s)?/%{INT:limit} for through connections exceeded.%{IPORHOST:src_ip}(\s)?/%{INT:src_port} to %{GREEDYDATA:global_ip} \(%{IPORHOST:dst_ip}(\s)?\)(\s)?/%{INT:dst_port} on interface %{GREEDYDATA:dst_interface}"
					]
				}
	}
	}
	#......................................................................#
	#FTD-603109
	if [messageid]=="603109" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{WORD:protocol} Tunnel at %{GREEDYDATA:src_interface},(\s)?tunnel-id(\s)?=(\s)?%{INT:tunnel_id}(\s)?,(\s)?remote-peer(\s)?=(\s)?%{IPORHOST:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#FTD-605004
	if [messageid]=="605004" {
			grok {
				match => {
					"cisco_msg" => [
					"%{GREEDYDATA:event_description} from %{GREEDYDATA:src_ip}/%{INT:src_port} to %{GREEDYDATA:dst_interface}:%{GREEDYDATA:dst_ip}/%{INT:dst_port} for user %{GREEDYDATA:username}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-617100
	if [messageid]=="617100" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown %{INT:num_conns} connection(\s)?(\(s\))? for user %{GREEDYDATA:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-106018
	if [messageid]=="106018" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} packet type %{INT:icmp_type} %{WORD:cisco_action} by %{WORD:direction} list %{GREEDYDATA:access_list} src %{GREEDYDATA:src_ip} dest %{GREEDYDATA:dst_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-106020
	if [messageid]=="106020" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:cisco_action} IP teardrop fragment \(size(\s)?=(\s)?%{INT:fragment_size},(\s)?offset(\s)?=(\s)?%{INT:fragment_offset}\) from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-106021
	if [messageid]=="106021" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:cisco_action} protocol reverse path check from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:src_interface}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-611301
	if [messageid]=="611301" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with no split tunneling:(\s)?NAT address:(\s)?%{GREEDYDATA:src_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-611303
	if [messageid]=="611303" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with split tunneling: NAT address:(\s)?%{GREEDYDATA:nat_address} Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-611304
	if [messageid]=="611304" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?%{WORD:protocol} exemption configured for Network Extension Mode with split tunneling: Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-611307
	if [messageid]=="611307" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?Head end:(\s)?%{GREEDYDATA:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-611309
	if [messageid]=="611309" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?%{WORD:cisco_action} from head end and uninstalling previously downloaded policy:(\s)?Head End:(\s)?%{GREEDYDATA:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-611310,611311
	if [messageid]=="611310" or [messageid]=="611311" {
			grok {
				match => {
					"cisco_msg" => [
					"VNPClient:(\s)?XAUTH (Succeeded|Failed):(\s)?Peer:(\s)?%{GREEDYDATA:src_ip}"
					]
				}
			}
			if [messageid]=="611310" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-611314
	if [messageid]=="611314" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient: Load Balancing Cluster with Virtual IP:(\s)?%{GREEDYDATA:src_ip} has redirected the to server %{GREEDYDATA:dst_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-611315
	if [messageid]=="611315" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?%{WORD:cisco_action} from Load Balancing Cluster member %{GREEDYDATA:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-611318
	if [messageid]=="611318" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient:(\s)?User %{GREEDYDATA:cisco_action}:(\s)?Auth Server IP:(\s)?%{GREEDYDATA:src_ip} Auth Server Port:(\s)?%{INT:dst_port} Idle Timeout: %{INT:timeout}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-710003
	if [messageid]=="710003" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:protocol} %{GREEDYDATA:cisco_action} by ACL from %{IPORHOST:src_ip}(\s)?/%{INT:src_port} to %{WORD:dst_interface}(\s)?(\s)?:(\s)?%{IPORHOST:dst_ip}(\s)?/%{INT:dst_port}%{GREEDYDATA:irrelevant}?"
					]
				}
			}
	}
	#......................................................................#
	#FTD-713252,713253
	if [messageid]=="713252" or [messageid]=="713253" {
			grok {
				match => {
					"cisco_msg" => [
					"Group = %{GREEDYDATA:group},(\s)?Username(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{GREEDYDATA:src_ip},(\s)?Integrity Firewall Server is not available.%{GREEDYDATA:irrelevant}"
					]
				}
			}
			if [messageid]=="713253" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-716001,716002,716003
	if [messageid]=="716001" or [messageid]=="716002" or [messageid]=="716003" {
			grok {
				match => {
					"cisco_msg" => [
					"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) WebVPN %{GREEDYDATA:cisco_action}"
					]
				}
			}
			mutate {
					add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-716004,716006,716007,716009
	if [messageid]=="716004" or [messageid]=="716006" or [messageid]=="716007" or [messageid]=="716009" {
			grok {
				match => {
					"cisco_msg" => [
					"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) WebVPN %{GREEDYDATA:cisco_action}"
					]
				}
			}
			if [messageid]=="716004" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-716005
	if [messageid]=="716005" {
			grok {
				match => {
					"cisco_msg" => [
					"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) WebVPN ACL Parse Error:(\s)?%{GREEDYDATA:reason}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-716038
	if [messageid]=="716038" {
			grok {
				match => {
					"cisco_msg" => [
					"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} %{GREEDYDATA:cisco_action}, Session %{GREEDYDATA:irrelevant}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-716039
	if [messageid]=="716039" {
			grok {
				match => {
					"cisco_msg" => [
					"%{GREEDYDATA:cisco_action},(\s)?group(\s)?=(\s)?%{GREEDYDATA:group} user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser})(\s)?,(\s)?Session %{GREEDYDATA:irrelevant}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-719017,719019,719020,719021,719022,719023
	if [messageid]=="719017" or [messageid]=="719019" or [messageid]=="719020" 
	or [messageid]=="719021" or [messageid]=="719022" or [messageid]=="719023" {
			grok {
				match => {
					"cisco_msg" => [
					"WebVPN user(:)?(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) %{GREEDYDATA:cisco_action}"
					]
				}
			}
			if [messageid]=="719020" or [messageid]=="719022" {
				mutate {
					add_field => { "[logx][utm][action]" => "Success" }
				}
			}
	}
	#......................................................................#
	#FTD-719018
	if [messageid]=="719018" {
			grok {
				match => {
					"cisco_msg" => [
					"WebVPN user:(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) ACL ID %{GREEDYDATA:access_list} not %{GREEDYDATA:irrelevant}"
					]
				}
			}
			mutate {
				add_field => { "[logx][cisco_firepower][reason]" => "ACL not found"	}
			}
	}
	#......................................................................#
	#FTD-719024
	if [messageid]=="719024" {
			grok {
				match => {
					"cisco_msg" => [
					"Email Proxy %{GREEDYDATA:cisco_action}:(\s)?session(\s)?=(\s)?%{GREEDYDATA:session} user(\s)?=(\s)?(''%{DATA:src_fwuser}''|%{DATA:src_fwuser}) addr(\s)?=(\s)?%{GREEDYDATA:src_ip}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-609002
	if [messageid]=="609002" {
			grok {
				match => {
					"cisco_msg" => [
					"Teardown local-host %{GREEDYDATA:zone-name}/\*(\s)?:(\s)?%{GREEDYDATA:src_ip} duration %{GREEDYDATA:duration}"
					]
				}
			}
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
	#......................................................................#
	#FTD-611305
	if [messageid]=="611305" {
			grok {
				match => {
					"cisco_msg" => [
					"VPNClient(\s)?:(\s)?DHCP Policy installed(\s)?:(\s)?Primary DNS(\s)?:(\s)?%{GREEDYDATA:primary_dns_ip} Secondary DNS(\s)?:(\s)?%{GREEDYDATA:secondary_dns_ip} Primary WINS(\s)?:(\s)?%{GREEDYDATA:primary_wins_ip} Secondary WINS(\s)?:(\s)?%{GREEDYDATA:secondary_wins_ip}"
					]
				}
			}
	}
	#......................................................................#
	#FTD-733100
	if [messageid]=="733100" {
			grok {
				match => {
					"cisco_msg" => [
					"(\[)?%{DATA:object}(\])? drop rate(\s)?(-)?%{INT:rate_id} exceeded. Current burst rate is %{INT:current_rate_val} per second(,)?(\s)?(_)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second(,)?(\s)?(_)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?"
					]
				}
			}
	}
	#......................................................................#
	#FTD-733101
	if [messageid]=="733101" {
			grok {
				match => {
					"cisco_msg" => [
					"%{WORD:object} %{GREEDYDATA:dst_ip} is targeted. Current burst rate is %{INT:current_rate_val} per second,(\s)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second,(\s)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?",
					"%{WORD:object} %{GREEDYDATA:src_ip} is attacking. Current burst rate is %{INT:current_rate_val} per second,(\s)?max configured rate is %{INT:current_rate_val_max}(\s)?;(\s)?Current average rate is %{INT:average_rate_val} per second,(\s)?max configured rate is %{INT:average_rate_val_max}(\s)?;(\s)?Cumulative total count is %{INT:total_cnt}%{GREEDYDATA:irrelevant}?"

					]
				}
			}
	}
	#......................................................................#
	#FTD-733102
	if [messageid]=="733102" {
			grok {
				match => {
					"cisco_msg" => [
					"Threat-detection add(s)? host %{GREEDYDATA:src_ip} to %{GREEDYDATA:irrelevant}?"

					]
				}
			}
	}
	#......................................................................#
	#FTD-733103
	if [messageid]=="733103" {
			grok {
				match => {
					"cisco_msg" => [
					"Threat-detection removes host %{GREEDYDATA:src_ip} from %{GREEDYDATA:irrelevant}?"
					]
				}
			}
	}
	#......................................................................#
	#FTD-733104,733105
	if [messageid]=="733104" or [messageid]=="733105" {
			grok {
				match => {
					"cisco_msg" => [
					"TD_SYSLOG_%{DATA:protocol}_%{DATA:cisco_action}_AVERAGE_RATE_EXCEED%{GREEDYDATA:irrelevant}?",
					"TD_SYSLOG_%{DATA:protocol}_%{DATA:cisco_action}_BURST_RATE_EXCEED%{GREEDYDATA:irrelevant}?"
					]
				}
			}
	}
}
#......................................................................#	   
#Decoding severity
if [severity]{
	if [severity] == "1" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Alert"
			}
		}	
	}
	if [severity] == "2" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Critical"
			}
		}	
	}
	if [severity] == "3" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Error"
			}
		}	
	}
	if [severity] == "4" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Warning"
			}
		}	
	}
	if [severity] == "5" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Notification"
			}
		}	
	}
	if [severity] == "6" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Informational"
			}
		}	
	}
	if [severity] == "7" {
		mutate {
			add_field => {
				"[logx][cisco_firepower][severityLabel]" => "Debugging"
			}
		}	
	}
}
#......................................................................#	   
#Formatting number values
if [severity]{
	mutate { convert => {"severity" => "integer"}}
}
if [messageid]{
	mutate { convert => {"messageid" => "integer"}}
}
if [src_port]{
	mutate { convert => {"src_port" => "integer"}}
}
if [dst_port]{
	mutate { convert => {"dst_port" => "integer"}}
}
if [hit_count]{
	mutate { convert => {"hit_count" => "integer"}}
}
if [bytes_xmt]{
	mutate { convert => {"bytes_xmt" => "integer"}}
}
if [bytes_rcv]{
	mutate { convert => {"bytes_rcv" => "integer"}}
}
if [in_if_num]{
	mutate { convert => {"in_if_num" => "integer"}}
}
if [out_if_num]{
	mutate { convert => {"out_if_num" => "integer"}}
}
if [mapped_src_port]{
	mutate { convert => {"mapped_src_port" => "integer"}}
}
if [mapped_dst_port]{
	mutate { convert => {"mapped_dst_port" => "integer"}}
}
if [icmp_type]{
	mutate { convert => {"icmp_type" => "integer"}}
}
if [code]{
	mutate { convert => {"code" => "integer"}}
}
if [tunnel_id]{
	mutate { convert => {"tunnel_id" => "integer"}}
}
if [num_conns]{
	mutate { convert => {"num_conns" => "integer"}}
}
if [fragment_size]{
	mutate { convert => {"fragment_size" => "integer"}}
}
if [fragment_offset]{
	mutate { convert => {"fragment_offset" => "integer"}}
}
if [timeout]{
	mutate { convert => {"timeout" => "integer"}}
}
if [global_port]{
	mutate { convert => {"global_port" => "integer"}}
}
if [global_port]{
	mutate { convert => {"src_port_local" => "integer"}}
}
#......................................................................#
#Then add all possible fields to the json tree structure

   mutate { 
      rename => { "priority" => "[logx][cisco_firepower][priority]" }
      rename => { "severity" => "[logx][cisco_firepower][severity]" }
      rename => { "message" => "[logx][cisco_firepower][message]" }
      rename => { "messageid" => "[logx][cisco_firepower][messageid]" }
      rename => { "cisco_action" => "[logx][cisco_firepower][cisco_action]" }
      rename => { "protocol" => "[logx][cisco_firepower][proto]" }
      rename => { "src_ip" => "[logx][cisco_firepower][src_ip]" }
      rename => { "src_port" => "[logx][cisco_firepower][src_port]" }
      rename => { "dst_ip" => "[logx][cisco_firepower][dest_ip]" }
      rename => { "dst_port" => "[logx][cisco_firepower][dest_port]" }
      rename => { "direction" => "[logx][cisco_firepower][direction]" }
      rename => { "src_interface" => "[logx][cisco_firepower][src_interface]" }
      rename => { "tcp_flags" => "[logx][cisco_firepower][tcp_flags]" }
      rename => { "event_description" => "[logx][cisco_firepower][event_desc]" }
      rename => { "limit" => "[logx][cisco_firepower][limit]" }
      rename => { "num_conns" => "[logx][cisco_firepower][num_conns]" }
      rename => { "global_ip" => "[logx][cisco_firepower][global_ip]" }
      rename => { "spi" => "[logx][cisco_firepower][spi]" }
      rename => { "seq_num" => "[logx][cisco_firepower][seq_num]" }
      rename => { "username" => "[logx][cisco_firepower][src_user]" }
      rename => { "http_message" => "[logx][cisco_firepower][http_message]" }
      rename => { "src_real_mac_address" => "[logx][cisco_firepower][src_real_mac_address]" }
      rename => { "src_mac_address" => "[logx][cisco_firepower][src_mac_address]" }
      rename => { "dst_interface" => "[logx][cisco_firepower][dst_interface]" }
      rename => { "limit" => "[logx][cisco_firepower][limit]" }

      #New fields from FTD-1-106101
      rename => { "num_flows" => "[logx][cisco_firepower][num_flows]" }

      #New fields from FTD-6-106102
      rename => { "access_list" => "[logx][cisco_firepower][access_list_id]" }
      rename => { "src_fwuser" => "[logx][cisco_firepower][src_user]" }
      rename => { "hit_count" => "[logx][cisco_firepower][hit_count]" }
	  	  
      #New fields from FTD-109101,109102,109103
      rename => { "audit_session_id" => "[logx][cisco_firepower][audit_session_id]" }
	  
      #New fields from FTD-109201 to 109213
      rename => { "session" => "[logx][cisco_firepower][session]" }
	  
      #New fields from FTD-113004
      rename => { "aaa_type" => "[logx][cisco_firepower][aaa_type]" }

      #New fields from FTD-113009
      rename => { "policy" => "[logx][cisco_firepower][policy]" }
	  
      #New fields from FTD-113013
      rename => { "reason" => "[logx][cisco_firepower][reason]" }
	  
      #New fields from FTD-113019
      rename => { "group" => "[logx][cisco_firepower][group]" }
      rename => { "session_type" => "[logx][cisco_firepower][session_type]" }
      rename => { "duration" => "[logx][cisco_firepower][duration]" }
      rename => { "bytes_xmt" => "[logx][cisco_firepower][bytes_xmt]" }
      rename => { "bytes_rcv" => "[logx][cisco_firepower][bytes_rcv]" }
	  
      #New fields from FTD-113031
      rename => { "filter" => "[logx][cisco_firepower][filter]" }
	  
      #New fields from FTD-113042
      rename => { "client_ip" => "[logx][cisco_firepower][client_ip]" }
	  
      #New fields from FTD-4-209003
      rename => { "id" => "[logx][cisco_firepower][id]" }

      #New fields from FTD-316002
      rename => { "in_if_num" => "[logx][cisco_firepower][in_if_num]" }
      rename => { "out_if_num" => "[logx][cisco_firepower][out_if_num]" }
	  
      #New fields from FTD-302002,322003
      rename => { "src_fake_mac_address" => "[logx][cisco_firepower][src_fake_mac_address]" }

      #New fields from FTD-302013
      rename => { "connection_id" => "[logx][cisco_firepower][connection_id]" }
      rename => { "mapped_src_ip" => "[logx][cisco_firepower][mapped_src_ip]" }
      rename => { "mapped_src_port" => "[logx][cisco_firepower][mapped_src_port]" }
      rename => { "mapped_dst_ip" => "[logx][cisco_firepower][mapped_dst_ip]" }
      rename => { "mapped_dst_port" => "[logx][cisco_firepower][mapped_dst_port]" }
      rename => { "dst_fwuser" => "[logx][cisco_firepower][dst_user]" }

      #New fields from FTD-302017
      rename => { "translated_src_ip" => "[logx][cisco_firepower][translated_src_ip]" }
      rename => { "translated_dst_ip" => "[logx][cisco_firepower][translated_dst_ip]" }
      rename => { "translated_cid" => "[logx][cisco_firepower][translated_cid]" }
      rename => { "real_cid" => "[logx][cisco_firepower][real_cid]" }

      #New fields from FTD-302021
      rename => { "icmp_type" => "[logx][cisco_firepower][icmp_type]" }
      rename => { "code" => "[logx][cisco_firepower][code]" }
      rename => { "src_ip_local" => "[logx][cisco_firepower][src_ip_local]" }
      rename => { "src_port_local" => "[logx][cisco_firepower][src_port_local]" }

      #New fields from FTD-302020
      rename => { "global_port" => "[logx][cisco_firepower][global_port]" }

      #New fields from FTD-302022
      rename => { "role" => "[logx][cisco_firepower][role]" }

      #New fields from FTD-305012
      rename => { "acl_name" => "[logx][cisco_firepower][access_list_name]" }

      #New fields from FTD-4-402115
      rename => { "act_proto" => "[logx][cisco_firepower][act_proto]" }

      #New fields from FTD-4-402116
      rename => { "pkt_daddr" => "[logx][cisco_firepower][pkt_daddr]" }
      rename => { "pkt_saddr" => "[logx][cisco_firepower][pkt_saddr]" }
      rename => { "pkt_prot" => "[logx][cisco_firepower][pkt_prot]" }
      rename => { "id_daddr" => "[logx][cisco_firepower][id_daddr]" }
      rename => { "id_dmask" => "[logx][cisco_firepower][id_dmask]" }
      rename => { "id_dprot" => "[logx][cisco_firepower][id_dprot]" }
      rename => { "id_saddr" => "[logx][cisco_firepower][id_saddr]" }
      rename => { "id_smask" => "[logx][cisco_firepower][id_smask]" }
      rename => { "id_sprot" => "[logx][cisco_firepower][id_sprot]" }

      #New fields from FTD-4-402118
      rename => { "frag_len" => "[logx][cisco_firepower][frag_len]" }
      rename => { "frag_offset" => "[logx][cisco_firepower][frag_offset]" }

      #New fields from FTD-5-402128
      rename => { "size" => "[logx][cisco_firepower][size]" }

      #New fields from FTD-4-405001
      rename => { "src_real_ip" => "[logx][cisco_firepower][src_real_ip]" }

      #New fields from FTD-603109
      rename => { "tunnel_id" => "[logx][cisco_firepower][tunnel_id]" }

      #New fields from FTD-106020
      rename => { "fragment_size" => "[logx][cisco_firepower][fragment_size]" }
      rename => { "fragment_offset" => "[logx][cisco_firepower][fragment_offset]" }

      #New fields from FTD-611303
      rename => { "nat_address" => "[logx][cisco_firepower][nat_address]" }
      rename => { "src_masc" => "[logx][cisco_firepower][src_masc]" }
      rename => { "dst_masc" => "[logx][cisco_firepower][dst_masc]" }

      #New fields from FTD-611305
      rename => { "primary_dns_ip" => "[logx][cisco_firepower][primary_dns_ip]" }
      rename => { "secondary_dns_ip" => "[logx][cisco_firepower][secondary_dns_ip]" }
      rename => { "primary_wins_ip" => "[logx][cisco_firepower][primary_wins_ip]" }
      rename => { "secondary_wins_ip" => "[logx][cisco_firepower][secondary_wins_ip]" }

      #New fields from FTD-611318
      rename => { "timeout" => "[logx][cisco_firepower][timeout]" }

      #New fields from FTD-609002
      rename => { "zone-name" => "[logx][cisco_firepower][zone-name]" }

      #New fields from FTD-733100,733101
      rename => { "object" => "[logx][cisco_firepower][object]" }
      rename => { "rate_id" => "[logx][cisco_firepower][rate_id]" }
      rename => { "current_rate_val" => "[logx][cisco_firepower][current_rate_val]" }
      rename => { "current_rate_val_max" => "[logx][cisco_firepower][current_rate_val_max]" }
      rename => { "average_rate_val" => "[logx][cisco_firepower][average_rate_val]" }
      rename => { "average_rate_val_max" => "[logx][cisco_firepower][average_rate_val_max]" }
      rename => { "total_cnt" => "[logx][cisco_firepower][total_cnt]" }
   }
   
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path","cisco_tag","cisco_msg_init","cisco_message","tdate",
      "irrelevant","cisco_msg","ciscoDataSource", "ciscoSyslogHeader", "ciscoHostInfo"]
   }		
  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["original_log_message","headers"]
   }
}
',filter_version='2.0.2'
	WHERE id=303;
            ]]>
        </sql>
    </changeSet>
</databaseChangeLog>
