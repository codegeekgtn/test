package repository

import (
	"github.com/utmstack/UTMStack/agent-manager/config"
	"github.com/utmstack/UTMStack/agent-manager/models"
	"gorm.io/gorm"
)

type AgentMalwareRepository struct {
	db *gorm.DB
}

func NewMalwareRepository() *AgentMalwareRepository {
	return &AgentMalwareRepository{db: config.GetDB()}
}

func (r *AgentMalwareRepository) CreateDetection(detection *models.AgentMalwareDetection) error {
	return r.db.Create(detection).Error
}

func (r *AgentMalwareRepository) UpdateDetection(detection *models.AgentMalwareDetection) error {
	return r.db.Save(detection).Error
}

func (r *AgentMalwareRepository) FindDetectionByID(id uint) (*models.AgentMalwareDetection, error) {
	var detection models.AgentMalwareDetection
	if err := r.db.First(&detection, id).Error; err != nil {
		return nil, err
	}
	return &detection, nil
}

func (r *AgentMalwareRepository) FindAllDetectionsByAgentID(agentID uint) ([]*models.AgentMalwareDetection, error) {
	var detections []*models.AgentMalwareDetection
	if err := r.db.Where("agent_id = ?", agentID).Find(&detections).Error; err != nil {
		return nil, err
	}
	return detections, nil
}

func (r *AgentMalwareRepository) CreateHistory(history *models.AgentMalwareHistory) error {
	return r.db.Create(history).Error
}

func (r *AgentMalwareRepository) FindAllHistoriesByMalwareID(malwareID uint) ([]models.AgentMalwareHistory, error) {
	var histories []models.AgentMalwareHistory
	if err := r.db.Where("malware_id = ?", malwareID).Find(&histories).Error; err != nil {
		return nil, err
	}
	return histories, nil
}

func (r *AgentMalwareRepository) CreateExclusion(exclusion *models.AgentMalwareExclusion) error {
	return r.db.Create(exclusion).Error
}

func (r *AgentMalwareRepository) FindAllExclusionsByAgentID(agentID uint) ([]models.AgentMalwareExclusion, error) {
	var exclusions []models.AgentMalwareExclusion
	if err := r.db.Where("agent_id = ?", agentID).Find(&exclusions).Error; err != nil {
		return nil, err
	}
	return exclusions, nil
}

// GetAgentMalwareByFilter GetByFilter GetAgentsWithFilters returns a paginated list of agents filtered by search query and sorted by provided fields
func (r *AgentMalwareRepository) GetAgentMalwareByFilter(pageNumber, pageSize int, searchQuery string,
	sortBy []string, sortDesc bool) ([]models.AgentMalwareDetection, int64, error) {
	var agents []models.AgentMalwareDetection
	var count int64

	db := r.db

	if searchQuery != "" {
		db = db.Where("file_path LIKE ? OR sha256 LIKE ? OR md5 LIKE ? OR description LIKE ?",
			"%"+searchQuery+"%", "%"+searchQuery+"%", "%"+searchQuery+"%", "%"+searchQuery+"%")
	}

	for _, field := range sortBy {
		if sortDesc {
			db = db.Order(field + " DESC")
		} else {
			db = db.Order(field)
		}
	}

	db = db.Offset((pageNumber - 1) * pageSize).Limit(pageSize).Find(&agents)
	db.Model(&models.AgentMalwareDetection{}).Count(&count)

	if err := db.Error; err != nil {
		return nil, 0, err
	}

	return agents, count, nil
}
