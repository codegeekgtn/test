package service

import (
	"errors"

	"github.com/utmstack/UTMStack/agent-manager/models"
	"github.com/utmstack/UTMStack/agent-manager/repository"
)

type AgentMalwareService struct {
	repo *repository.AgentMalwareRepository
}

func NewAgentMalwareService() *AgentMalwareService {
	repo := repository.NewMalwareRepository()
	return &AgentMalwareService{repo: repo}
}

func (s *AgentMalwareService) GetAgentExclusions(agentID int64) ([]models.AgentMalwareExclusion, error) {
	exclusions, err := s.repo.FindAllExclusionsByAgentID(uint(agentID))
	if err != nil {
		return nil, err
	}
	return exclusions, nil
}

func (s *AgentMalwareService) CreateNewMalwareEntry(detection models.AgentMalwareDetection) error {
	// Validate input
	if detection.AgentID <= 0 {
		return errors.New("invalid agent ID")
	}
	if detection.FilePath == "" {
		return errors.New("file path cannot be empty")
	}
	if detection.Sha256 == "" && detection.Md5 == "" {
		return errors.New("either SHA256 or MD5 must be provided")
	}
	if detection.Status == "" {
		detection.Status = models.New
	}

	return s.repo.CreateDetection(&detection)
}

func (s *AgentMalwareService) ChangeMalwareStatus(malwareID int64, status models.MalwareStatus, changedBy string) error {
	// Validate input
	if malwareID <= 0 {
		return errors.New("invalid malware ID")
	}
	if status == "" {
		return errors.New("invalid malware status")
	}
	if changedBy == "" {
		return errors.New("invalid changed user")
	}
	// Get the malware detection from the repository
	detection, err := s.repo.FindDetectionByID(uint(malwareID))
	if err != nil {
		return err
	}

	// Update the malware detection status
	detection.Status = status

	// Create a new malware history entry
	history := models.AgentMalwareHistory{
		MalwareId:  detection.ID,
		PrevStatus: detection.Status,
		ToStatus:   status,
		ChangedBy:  changedBy,
	}
	if err := s.repo.CreateHistory(&history); err != nil {
		return err
	}

	// Update the malware detection in the repository
	return s.repo.UpdateDetection(detection)
}

func (s *AgentMalwareService) ListAgentMalware(pageNumber, pageSize int, searchQuery string, sortBy []string, sortDesc bool) ([]models.AgentMalwareDetection, int, error) {
	malware, total, err := s.repo.GetAgentMalwareByFilter(pageNumber, pageSize, searchQuery, sortBy, sortDesc)
	if err != nil {
		return nil, 0, err
	}
	return malware, int(total), nil
}

func (s *AgentMalwareService) ListAgentMalwareHistory(malwareId uint) ([]models.AgentMalwareHistory, error) {
	history, err := s.repo.FindAllHistoriesByMalwareID(malwareId)
	if err != nil {
		return nil, err
	}
	return history, nil
}
