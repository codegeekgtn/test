// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: agent_malware.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentMalwareService_GetAgentExclusions_FullMethodName      = "/agent.AgentMalwareService/GetAgentExclusions"
	AgentMalwareService_CreateNewMalwareEntry_FullMethodName   = "/agent.AgentMalwareService/CreateNewMalwareEntry"
	AgentMalwareService_ChangeMalwareStatus_FullMethodName     = "/agent.AgentMalwareService/ChangeMalwareStatus"
	AgentMalwareService_ListAgentMalware_FullMethodName        = "/agent.AgentMalwareService/ListAgentMalware"
	AgentMalwareService_ListAgentMalwareHistory_FullMethodName = "/agent.AgentMalwareService/ListAgentMalwareHistory"
)

// AgentMalwareServiceClient is the client API for AgentMalwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentMalwareServiceClient interface {
	GetAgentExclusions(ctx context.Context, in *ListExclusionRequest, opts ...grpc.CallOption) (*ListExclusionResponse, error)
	CreateNewMalwareEntry(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMalwareDetection, AgentMalwareDetection], error)
	ChangeMalwareStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChangeStatusRequest, AgentMalwareDetection], error)
	ListAgentMalware(ctx context.Context, in *ListMalwareRequest, opts ...grpc.CallOption) (*ListMalwareResponse, error)
	ListAgentMalwareHistory(ctx context.Context, in *ListMalwareHistoryRequest, opts ...grpc.CallOption) (*ListMalwareHistoryResponse, error)
}

type agentMalwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentMalwareServiceClient(cc grpc.ClientConnInterface) AgentMalwareServiceClient {
	return &agentMalwareServiceClient{cc}
}

func (c *agentMalwareServiceClient) GetAgentExclusions(ctx context.Context, in *ListExclusionRequest, opts ...grpc.CallOption) (*ListExclusionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExclusionResponse)
	err := c.cc.Invoke(ctx, AgentMalwareService_GetAgentExclusions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMalwareServiceClient) CreateNewMalwareEntry(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMalwareDetection, AgentMalwareDetection], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentMalwareService_ServiceDesc.Streams[0], AgentMalwareService_CreateNewMalwareEntry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentMalwareDetection, AgentMalwareDetection]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMalwareService_CreateNewMalwareEntryClient = grpc.BidiStreamingClient[AgentMalwareDetection, AgentMalwareDetection]

func (c *agentMalwareServiceClient) ChangeMalwareStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChangeStatusRequest, AgentMalwareDetection], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentMalwareService_ServiceDesc.Streams[1], AgentMalwareService_ChangeMalwareStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChangeStatusRequest, AgentMalwareDetection]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMalwareService_ChangeMalwareStatusClient = grpc.BidiStreamingClient[ChangeStatusRequest, AgentMalwareDetection]

func (c *agentMalwareServiceClient) ListAgentMalware(ctx context.Context, in *ListMalwareRequest, opts ...grpc.CallOption) (*ListMalwareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMalwareResponse)
	err := c.cc.Invoke(ctx, AgentMalwareService_ListAgentMalware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMalwareServiceClient) ListAgentMalwareHistory(ctx context.Context, in *ListMalwareHistoryRequest, opts ...grpc.CallOption) (*ListMalwareHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMalwareHistoryResponse)
	err := c.cc.Invoke(ctx, AgentMalwareService_ListAgentMalwareHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentMalwareServiceServer is the server API for AgentMalwareService service.
// All implementations must embed UnimplementedAgentMalwareServiceServer
// for forward compatibility.
type AgentMalwareServiceServer interface {
	GetAgentExclusions(context.Context, *ListExclusionRequest) (*ListExclusionResponse, error)
	CreateNewMalwareEntry(grpc.BidiStreamingServer[AgentMalwareDetection, AgentMalwareDetection]) error
	ChangeMalwareStatus(grpc.BidiStreamingServer[ChangeStatusRequest, AgentMalwareDetection]) error
	ListAgentMalware(context.Context, *ListMalwareRequest) (*ListMalwareResponse, error)
	ListAgentMalwareHistory(context.Context, *ListMalwareHistoryRequest) (*ListMalwareHistoryResponse, error)
	mustEmbedUnimplementedAgentMalwareServiceServer()
}

// UnimplementedAgentMalwareServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentMalwareServiceServer struct{}

func (UnimplementedAgentMalwareServiceServer) GetAgentExclusions(context.Context, *ListExclusionRequest) (*ListExclusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentExclusions not implemented")
}
func (UnimplementedAgentMalwareServiceServer) CreateNewMalwareEntry(grpc.BidiStreamingServer[AgentMalwareDetection, AgentMalwareDetection]) error {
	return status.Errorf(codes.Unimplemented, "method CreateNewMalwareEntry not implemented")
}
func (UnimplementedAgentMalwareServiceServer) ChangeMalwareStatus(grpc.BidiStreamingServer[ChangeStatusRequest, AgentMalwareDetection]) error {
	return status.Errorf(codes.Unimplemented, "method ChangeMalwareStatus not implemented")
}
func (UnimplementedAgentMalwareServiceServer) ListAgentMalware(context.Context, *ListMalwareRequest) (*ListMalwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentMalware not implemented")
}
func (UnimplementedAgentMalwareServiceServer) ListAgentMalwareHistory(context.Context, *ListMalwareHistoryRequest) (*ListMalwareHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentMalwareHistory not implemented")
}
func (UnimplementedAgentMalwareServiceServer) mustEmbedUnimplementedAgentMalwareServiceServer() {}
func (UnimplementedAgentMalwareServiceServer) testEmbeddedByValue()                             {}

// UnsafeAgentMalwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentMalwareServiceServer will
// result in compilation errors.
type UnsafeAgentMalwareServiceServer interface {
	mustEmbedUnimplementedAgentMalwareServiceServer()
}

func RegisterAgentMalwareServiceServer(s grpc.ServiceRegistrar, srv AgentMalwareServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentMalwareServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentMalwareService_ServiceDesc, srv)
}

func _AgentMalwareService_GetAgentExclusions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExclusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMalwareServiceServer).GetAgentExclusions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMalwareService_GetAgentExclusions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMalwareServiceServer).GetAgentExclusions(ctx, req.(*ListExclusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMalwareService_CreateNewMalwareEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentMalwareServiceServer).CreateNewMalwareEntry(&grpc.GenericServerStream[AgentMalwareDetection, AgentMalwareDetection]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMalwareService_CreateNewMalwareEntryServer = grpc.BidiStreamingServer[AgentMalwareDetection, AgentMalwareDetection]

func _AgentMalwareService_ChangeMalwareStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentMalwareServiceServer).ChangeMalwareStatus(&grpc.GenericServerStream[ChangeStatusRequest, AgentMalwareDetection]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMalwareService_ChangeMalwareStatusServer = grpc.BidiStreamingServer[ChangeStatusRequest, AgentMalwareDetection]

func _AgentMalwareService_ListAgentMalware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMalwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMalwareServiceServer).ListAgentMalware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMalwareService_ListAgentMalware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMalwareServiceServer).ListAgentMalware(ctx, req.(*ListMalwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMalwareService_ListAgentMalwareHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMalwareHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMalwareServiceServer).ListAgentMalwareHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMalwareService_ListAgentMalwareHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMalwareServiceServer).ListAgentMalwareHistory(ctx, req.(*ListMalwareHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentMalwareService_ServiceDesc is the grpc.ServiceDesc for AgentMalwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentMalwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentMalwareService",
	HandlerType: (*AgentMalwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentExclusions",
			Handler:    _AgentMalwareService_GetAgentExclusions_Handler,
		},
		{
			MethodName: "ListAgentMalware",
			Handler:    _AgentMalwareService_ListAgentMalware_Handler,
		},
		{
			MethodName: "ListAgentMalwareHistory",
			Handler:    _AgentMalwareService_ListAgentMalwareHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateNewMalwareEntry",
			Handler:       _AgentMalwareService_CreateNewMalwareEntry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChangeMalwareStatus",
			Handler:       _AgentMalwareService_ChangeMalwareStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent_malware.proto",
}
