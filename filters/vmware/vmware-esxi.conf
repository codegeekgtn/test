filter {
# VMWare ESXi filter, version 2.0.1
# Based on https://core.vmware.com/esxi-log-message-formats (june, 2022)
# and real logs provided
    
    split {
     field => "message"
     terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }
    
    if ![dataType] {
      if ([message]) {
        grok {
            match => {
                "message" => [
                    "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:vmwareDataSource} %{WORD:process}: %{WORD:level} %{GREEDYDATA:msg}",
                    "%{DATA}>%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:vmwareDataSource} %{WORD:process}: %{WORD:level} %{GREEDYDATA:msg}",
                    "(<%{NUMBER:priority}>)?%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:vmwareDataSource} %{DATA:process}(\[%{INT:pid}\])?: %{GREEDYDATA:msg}"
                ]
            }
        }
      }
    }
    #......................................................................#
    #Generating dataSource field required by CurrelationRulesEngine
    #Checks if vmwareDataSource exists, if true, the dataSource field take its value, if not, take the agent dataSource value
     if ([vmwareDataSource]){
            if [dataSource] {
              mutate {
                update => { "dataSource" => "%{[vmwareDataSource]}" }
              }
            } else {
              mutate {
                add_field => { "dataSource" => "%{vmwareDataSource}" }
              }
            }
     }
    #Finally evaluates to the host variable if can not be calculated
     if ![dataSource] {
        mutate {
           add_field => { "dataSource" => "%{host}" }
         }
     }

    if [process] and ([process] == "Hostd" or [process] == "VVold" or [process] == "Vpxa" 
    or [process] == "Rhttpproxy" or [process] == "vmkernel" or [process] == "Fdm" 
    or [process] == "vmkwarning" or [process] == "vobd" or [process] == "osfsd" 
    or ([process] == "hostd-probe" and ([msg] and "ESXi" in [msg])) or ([process] == "crx-cli" and ([msg] and "VMware ESXi" in [msg])) ){
        mutate {
            remove_field => [ "message" ]
            add_field => {"[dataType]" => "vmware-esxi"}
        }
    }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["vmwareDataSource","original_log_message","headers"]
   }
}
