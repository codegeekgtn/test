filter {

# ESET filter version 2.0.1
# Based in https://help.eset.com/esmc_admin/70/en-US/events-exported-to-json-format.html#custom_keys
# and real logs provided
    split {
      field => "message"
      terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
     grok {
      match => {
        "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
      }
     }
    }
    if [original_log_message] {
     mutate {
      update => { "message" => "%{[original_log_message]}" }
     }
    }

    if ![dataType] {
        #First, search for common fields to define the entry point 
        if [message] and "event_type" in [message] and "source_uuid" in [message] and "occured" in [message] and "severity" in [message] {
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if exists, if not evaluate to the host variable
           if (![dataSource]){
              mutate {
               add_field => { "dataSource" => "%{host}" }
              }
           }
#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
              mutate {
               add_field => { "dataType" => "antivirus-esmc-eset" }
              }
#......................................................................#
#Using grok to parse header of the message
          grok {
            match => {
              "message" => [
                 "(%{INT:not_defined})?(\s)?(<%{NUMBER:priority}>)?(%{INT:syslog_version})? %{DATA:syslog_time} %{DATA:syslog_host} %{DATA:syslog_app} %{INT:pid} - - %{GREEDYDATA:json_msg}"
              ]
            }
          }
#......................................................................#
#Using grok to get the json message
      if [json_msg] {  
        if [json_msg] =~/^\{/ {
           json {
             source => "json_msg"
             target => "[logx][esmc_eset]"
           }
        } else {
			#Control if have a non ascii char at start of json message 
            grok {
              match => {
               "json_msg" => [
                 "\W%{GREEDYDATA:json_msg_clean}"
               ]
              }
            }
            json {
             source => "json_msg_clean"
             target => "[logx][esmc_eset]"
            }
          }
      }
#......................................................................#	   
#Formatting number values
   mutate {
      convert => {
            "priority" => "integer"
        }
   }
#......................................................................#
#Add the rest of fields to the tree structure
        mutate {
          rename => { "[syslog_time]" => "[logx][esmc_eset][syslog_time]" }
          rename => { "[pid]" => "[logx][esmc_eset][syslog_pid]" }
          rename => { "[syslog_host]" => "[logx][esmc_eset][syslog_host]" }
          rename => { "[syslog_app]" => "[logx][esmc_eset][syslog_app]" }
          rename => { "[priority]" => "[logx][esmc_eset][syslog_priority]" }
          rename => { "[message]" => "[logx][esmc_eset][message]" }

          #Rename fields used by correlation engine
          rename => { "[logx][esmc_eset][source_address]" => "[logx][esmc_eset][src_ip]" }
          rename => { "[logx][esmc_eset][source_port]" => "[logx][esmc_eset][src_port]" }
          rename => { "[logx][esmc_eset][target_address]" => "[logx][esmc_eset][dest_ip]" }
          rename => { "[logx][esmc_eset][target_port]" => "[logx][esmc_eset][dest_port]" }
          rename => { "[logx][esmc_eset][protocol]" => "[logx][esmc_eset][proto]" }
        }


   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path","tags","type","syslog_version","not_defined","json_msg","json_msg_clean"]
   }
  }
 }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["original_log_message","headers"]
   }
}
