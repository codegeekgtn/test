filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-logstash.html (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  
  #Filebeat logstash module, version 3.0.1
  #Suport input files with json format only to avoid parsing json in plain text inputs
  #Logstash have plain logs and json logs if (--log.format=json) option set when executing clientÂ´s logstash, 
  #see: https://www.elastic.co/guide/en/logstash/current/logstash-settings-file.html, current is 8.0
  
  #Filter Input requirements -> fileset: datatype
  #                             log: json
  #                             slowlog: json

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "logstash") 
  or ([service][type] and [service][type] == "logstash") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#   
    #Adding only JSON files support, assuming that log4j2.properties is set with default appender logs patterns
    if [message] {
      json {
        source => "message"
        target => "logstash"
      }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        mutate { 
            #General fields from ECS
            rename => { "host" => "[logx][logstash][host]" }
            rename => { "service" => "[logx][logstash][service]" }
            rename => { "ecs" => "[logx][logstash][ecs]" }
            rename => { "agent" => "[logx][logstash][agent]" }
            rename => { "fileset" => "[logx][logstash][fileset]" }
            rename => { "event" => "[logx][logstash][event]" }
            rename => { "input" => "[logx][logstash][input]" }
            rename => { "labels" => "[logx][logstash][labels]" }
            rename => { "as" => "[logx][logstash][as]" }
            rename => { "client" => "[logx][logstash][client]" }
            rename => { "cloud" => "[logx][logstash][cloud]" }
            rename => { "code_signature" => "[logx][logstash][code_signature]" }
            rename => { "container" => "[logx][logstash][container]" }
            rename => { "destination" => "[logx][logstash][destination]" }
            rename => { "dll" => "[logx][logstash][dll]" }
            rename => { "dns" => "[logx][logstash][dns]" }
            rename => { "error" => "[logx][logstash][error]" }
            rename => { "file" => "[logx][logstash][file]" }
            rename => { "geo" => "[logx][logstash][geo]" }
            rename => { "hash" => "[logx][logstash][hash]" }
            rename => { "http" => "[logx][logstash][http]" }
            rename => { "interface" => "[logx][logstash][interface]" }
            rename => { "network" => "[logx][logstash][network]" }
            rename => { "observer" => "[logx][logstash][observer]" }
            rename => { "organization" => "[logx][logstash][organization]" }
            rename => { "package" => "[logx][logstash][package]" }
            rename => { "pe" => "[logx][logstash][pe]" }
            rename => { "process" => "[logx][logstash][process]" }
            rename => { "registry" => "[logx][logstash][registry]" }
            rename => { "related" => "[logx][logstash][related]" }
            rename => { "rule" => "[logx][logstash][rule]" }
            rename => { "server" => "[logx][logstash][server]" }
            rename => { "source" => "[logx][logstash][source]" }
            rename => { "threat" => "[logx][logstash][threat]" }
            rename => { "tls" => "[logx][logstash][tls]" }
            rename => { "span.id" => "[logx][logstash][span.id]" }
            rename => { "trace.id" => "[logx][logstash][trace.id]" }
            rename => { "transaction.id" => "[logx][logstash][transaction.id]" }
            rename => { "url" => "[logx][logstash][url]" }
            rename => { "user" => "[logx][logstash][user]" }
            rename => { "vlan" => "[logx][logstash][vlan]" }
            rename => { "vulnerability" => "[logx][logstash][vulnerability]" }
            rename => { "x509" => "[logx][logstash][x509]" }

            #Fields from logstash module
            rename => { "logstash" => "[logx][logstash]" }
            rename => { "message" => "[logx][logstash][message]" }

            #Fields from logstash logs
            rename => { "timestamp" => "[logx][logstash][timestamp]" }
            rename => { "level" => "[logx][logstash][level]" }
            rename => { "loggerName" => "[logx][logstash][loggerName]" }

        }
    
    #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","path","tags","log"]
        }

  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
