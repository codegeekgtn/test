filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-kibana.html (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat kibana module, version 2.0.1
  #This version support only json input files
  #Filter Input requirements -> fileset: datatype
  #                             log: json
  #                             audit: json
  #Kibana by default logs to elastic index, so to log to file, must configure logging appenders and xpack.security.audit.appender in kibana.yml
  
  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }
  
  if ([event][module] and [event][module] == "kibana") or ([service][type] and [service][type] == "kibana") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#   
    #Adding only JSON files support, plain logs are not supported
    if [message] {
      json {
        source => "message"
        target => "msg_fields"
      }
    }
    #......................................................................#   
    #Change kibana fields generated, are already in target field and duplicated in kibana field by default
    #Then delete from the output
      mutate {
            rename => { "kibana" => "kibana_audit_temps" }
      }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        mutate { 
            #General fields from ECS
            rename => { "host" => "[logx][kibana][host]" }
            rename => { "service" => "[logx][kibana][service]" }
            rename => { "ecs" => "[logx][kibana][ecs]" }
            rename => { "agent" => "[logx][kibana][agent]" }
            rename => { "fileset" => "[logx][kibana][fileset]" }
            rename => { "event" => "[logx][kibana][event]" }
            rename => { "input" => "[logx][kibana][input]" }
            rename => { "labels" => "[logx][kibana][labels]" }
            rename => { "as" => "[logx][kibana][as]" }
            rename => { "client" => "[logx][kibana][client]" }
            rename => { "cloud" => "[logx][kibana][cloud]" }
            rename => { "code_signature" => "[logx][kibana][code_signature]" }
            rename => { "container" => "[logx][kibana][container]" }
            rename => { "destination" => "[logx][kibana][destination]" }
            rename => { "dll" => "[logx][kibana][dll]" }
            rename => { "dns" => "[logx][kibana][dns]" }
            rename => { "error" => "[logx][kibana][error]" }
            rename => { "file" => "[logx][kibana][file]" }
            rename => { "geo" => "[logx][kibana][geo]" }
            rename => { "hash" => "[logx][kibana][hash]" }
            rename => { "http" => "[logx][kibana][http]" }
            rename => { "interface" => "[logx][kibana][interface]" }
            rename => { "network" => "[logx][kibana][network]" }
            rename => { "observer" => "[logx][kibana][observer]" }
            rename => { "organization" => "[logx][kibana][organization]" }
            rename => { "package" => "[logx][kibana][package]" }
            rename => { "pe" => "[logx][kibana][pe]" }
            rename => { "process" => "[logx][kibana][process]" }
            rename => { "registry" => "[logx][kibana][registry]" }
            rename => { "related" => "[logx][kibana][related]" }
            rename => { "rule" => "[logx][kibana][rule]" }
            rename => { "server" => "[logx][kibana][server]" }
            rename => { "source" => "[logx][kibana][source]" }
            rename => { "threat" => "[logx][kibana][threat]" }
            rename => { "tls" => "[logx][kibana][tls]" }
            rename => { "span.id" => "[logx][kibana][span.id]" }
            rename => { "trace.id" => "[logx][kibana][trace.id]" }
            rename => { "transaction.id" => "[logx][kibana][transaction.id]" }
            rename => { "url" => "[logx][kibana][url]" }
            rename => { "user" => "[logx][kibana][user]" }
            rename => { "vlan" => "[logx][kibana][vlan]" }
            rename => { "vulnerability" => "[logx][kibana][vulnerability]" }
            rename => { "x509" => "[logx][kibana][x509]" }

        }
        mutate{
            #Fields from kibana module
            rename => { "message" => "[logx][kibana][message]" }

            #This fields comming from json logs
            rename => { "[json]" => "[logx][kibana]" }

            #Then rename fields from audit json fields
            rename => { "msg_fields" => "[logx][kibana]" }
        }
        #Make a new rename to avoid parallel excecution problems with rename fields in cascade
        mutate {
            rename => { "[logx][kibana][log]" => "[logx][kibana][change]" }
            rename => { "[logx][kibana][@timestamp]" => "[logx][kibana][timestamp]" }
        }
        #Make a new rename to avoid parallel excecution problems with rename fields in cascade
        mutate {
            rename => { "[logx][kibana][change][logger]" => "[logx][kibana][logger]" }
            rename => { "[logx][kibana][change][level]" => "[logx][kibana][level]" }
        }
    
    #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log","[logx][kibana][change]","irrelevant","kibana_audit_temps","msg_fields"]
        }

  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
