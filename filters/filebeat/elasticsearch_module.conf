filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-elasticsearch.html (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  
  #Filebeat elasticsearch module, version 2.0.1
  #Support logs from elasticsearch 7++
  #Filter Input requirements -> fileset: datatype
  #                             server: json
  #                             audit: json
  #                             deprecation: json
  #                             slowlog: json
  #                             gc: plain text
  #Logs comming from (server, audit, deprecation and slowlog) must be in json format, docummented in url above

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "elasticsearch") 
  or ([service][type] and [service][type] == "elasticsearch") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    

    #......................................................................#   
    #Adding JSON files support, except for gc because is plain log format 
    if [event][dataset] and [event][dataset] == "elasticsearch.gc" {
    #......................................................................#
    #Parse message field, for elasticsearch gc
      if [message] {
        grok {
          match => {
              "message" => [
              "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:level}%{SPACE}\]\[%{DATA:component}%{SPACE}\]%{SPACE}(?<general_message>(.|\r|\n)*)"
              ]
          }  
        }
      }
      if [level] {
        mutate { 
            #Change meaning of the second field
            rename => { "level" => "pid" }
        }
      }
    }else { 
      if [message] { 
         json {
           source => "message"
           target => "elasticsearch"
         }
      }
    }
    #......................................................................#	   
    #Formatting number values for gc
      if [pid] {
        mutate {
          convert => {
            "pid" => "integer"
          }
        }
      }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        mutate { 
            #General fields from ECS
            rename => { "host" => "[logx][elasticsearch][host]" }
            rename => { "service" => "[logx][elasticsearch][service]" }
            rename => { "ecs" => "[logx][elasticsearch][ecs]" }
            rename => { "agent" => "[logx][elasticsearch][agent]" }
            rename => { "fileset" => "[logx][elasticsearch][fileset]" }
            rename => { "event" => "[logx][elasticsearch][event]" }
            rename => { "input" => "[logx][elasticsearch][input]" }
            rename => { "labels" => "[logx][elasticsearch][labels]" }
            rename => { "as" => "[logx][elasticsearch][as]" }
            rename => { "client" => "[logx][elasticsearch][client]" }
            rename => { "cloud" => "[logx][elasticsearch][cloud]" }
            rename => { "code_signature" => "[logx][elasticsearch][code_signature]" }
            rename => { "container" => "[logx][elasticsearch][container]" }
            rename => { "destination" => "[logx][elasticsearch][destination]" }
            rename => { "dll" => "[logx][elasticsearch][dll]" }
            rename => { "dns" => "[logx][elasticsearch][dns]" }
            rename => { "error" => "[logx][elasticsearch][error]" }
            rename => { "file" => "[logx][elasticsearch][file]" }
            rename => { "geo" => "[logx][elasticsearch][geo]" }
            rename => { "hash" => "[logx][elasticsearch][hash]" }
            rename => { "http" => "[logx][elasticsearch][http]" }
            rename => { "interface" => "[logx][elasticsearch][interface]" }
            rename => { "network" => "[logx][elasticsearch][network]" }
            rename => { "observer" => "[logx][elasticsearch][observer]" }
            rename => { "organization" => "[logx][elasticsearch][organization]" }
            rename => { "package" => "[logx][elasticsearch][package]" }
            rename => { "pe" => "[logx][elasticsearch][pe]" }
            rename => { "process" => "[logx][elasticsearch][process]" }
            rename => { "registry" => "[logx][elasticsearch][registry]" }
            rename => { "related" => "[logx][elasticsearch][related]" }
            rename => { "rule" => "[logx][elasticsearch][rule]" }
            rename => { "server" => "[logx][elasticsearch][server]" }
            rename => { "source" => "[logx][elasticsearch][source]" }
            rename => { "threat" => "[logx][elasticsearch][threat]" }
            rename => { "tls" => "[logx][elasticsearch][tls]" }
            rename => { "span.id" => "[logx][elasticsearch][span.id]" }
            rename => { "trace.id" => "[logx][elasticsearch][trace.id]" }
            rename => { "transaction.id" => "[logx][elasticsearch][transaction.id]" }
            rename => { "url" => "[logx][elasticsearch][url]" }
            rename => { "user" => "[logx][elasticsearch][user]" }
            rename => { "vlan" => "[logx][elasticsearch][vlan]" }
            rename => { "vulnerability" => "[logx][elasticsearch][vulnerability]" }
            rename => { "x509" => "[logx][elasticsearch][x509]" }

            #Fields from elasticsearch module
            rename => { "elasticsearch" => "[logx][elasticsearch]" }
            rename => { "message" => "[logx][elasticsearch][message]" }

            #Fields from elasticsearch logs
            rename => { "timestamp" => "[logx][elasticsearch][timestamp]" }
            rename => { "level" => "[logx][elasticsearch][level]" }
            rename => { "component" => "[logx][elasticsearch][component]" }
            rename => { "node.name" => "[logx][elasticsearch][node.name]" }
            rename => { "index.name" => "[logx][elasticsearch][index.name]" }
            
            #Fields from elasticsearch gc logs
            rename => { "pid" => "[logx][elasticsearch][pid]" }
        }
    
    #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","path","tags","log","irrelevant","general_message"]
        }

  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
