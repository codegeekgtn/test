filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-mysql.html (february 2022)
  #https://dev.mysql.com/doc/refman/8.0/en/error-log-format.html (february 2022)
  #https://docs.oracle.com/en-us/iaas/Content/Logging/Reference/top_level_logging_format.htm (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat mysql module, version 2.0.1
  #Filter Input requirements -> fileset: datatype
  #                             error: json (version 8.0+). For this input filename must end with .json, contain -json or _json, and each log line must begin with { and end with }
  #                             error: plain text (older versions)
  #                             slowlog: plain text

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "mysql") 
  or ([service][type] and [service][type] == "mysql") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#   
    #Adding JSON files support for newer versions (8.0+)
    if [log][file][path] and ([log][file][path]=~/(.json)$/ or "-json" in [log][file][path] or "_json" in [log][file][path] or [message] =~ "\A\{.+\}\z" ){
      if [message]{
        json {
          source => "message"
          target => "mysql_tmp"
        }
      }
    }else {
    #......................................................................#
    #Parse message field in plain text format, begining from current versions to latter ones
      if [message]{
        grok {
          match => {
              "message" => [
              "%{GREEDYDATA:timestamp} %{INT:thread} \[%{DATA:label}%{SPACE}\] \[%{DATA:err_code}%{SPACE}\] \[%{DATA:subsystem}%{SPACE}\] %{GREEDYDATA:msg}",
              "%{GREEDYDATA:timestamp} %{INT:pid} \[%{DATA:label}%{SPACE}\] %{GREEDYDATA:msg}"
              ]
          } 
        }
      }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        #Fields from mysql json logs
        mutate {
            rename => { "mysql_tmp" => "[logx][mysql]" }
            rename => { "message" => "[logx][mysql][message]" }
        }
        #Fields from mysql plain logs
        mutate {
            rename => { "timestamp" => "[logx][mysql][timestamp]" }
            rename => { "thread" => "[logx][mysql][thread]" }
            rename => { "pid" => "[logx][mysql][pid]" }
            rename => { "label" => "[logx][mysql][label]" }
            rename => { "err_code" => "[logx][mysql][err_code]" }
            rename => { "subsystem" => "[logx][mysql][subsystem]" }
            rename => { "msg" => "[logx][mysql][msg]" }
        }
        mutate { 
        #General fields from ECS
            rename => { "host" => "[logx][mysql][host]" }
            rename => { "service" => "[logx][mysql][service]" }
            rename => { "ecs" => "[logx][mysql][ecs]" }
            rename => { "agent" => "[logx][mysql][agent]" }
            rename => { "fileset" => "[logx][mysql][fileset]" }
            rename => { "event" => "[logx][mysql][event]" }
            rename => { "input" => "[logx][mysql][input]" }
            rename => { "labels" => "[logx][mysql][labels]" }
            rename => { "as" => "[logx][mysql][as]" }
            rename => { "client" => "[logx][mysql][client]" }
            rename => { "cloud" => "[logx][mysql][cloud]" }
            rename => { "code_signature" => "[logx][mysql][code_signature]" }
            rename => { "container" => "[logx][mysql][container]" }
            rename => { "destination" => "[logx][mysql][destination]" }
            rename => { "dll" => "[logx][mysql][dll]" }
            rename => { "dns" => "[logx][mysql][dns]" }
            rename => { "error" => "[logx][mysql][error]" }
            rename => { "file" => "[logx][mysql][file]" }
            rename => { "geo" => "[logx][mysql][geo]" }
            rename => { "hash" => "[logx][mysql][hash]" }
            rename => { "http" => "[logx][mysql][http]" }
            rename => { "interface" => "[logx][mysql][interface]" }
            rename => { "network" => "[logx][mysql][network]" }
            rename => { "observer" => "[logx][mysql][observer]" }
            rename => { "organization" => "[logx][mysql][organization]" }
            rename => { "package" => "[logx][mysql][package]" }
            rename => { "pe" => "[logx][mysql][pe]" }
            rename => { "process" => "[logx][mysql][process]" }
            rename => { "registry" => "[logx][mysql][registry]" }
            rename => { "related" => "[logx][mysql][related]" }
            rename => { "rule" => "[logx][mysql][rule]" }
            rename => { "server" => "[logx][mysql][server]" }
            rename => { "source" => "[logx][mysql][source]" }
            rename => { "threat" => "[logx][mysql][threat]" }
            rename => { "tls" => "[logx][mysql][tls]" }
            rename => { "span.id" => "[logx][mysql][span.id]" }
            rename => { "trace.id" => "[logx][mysql][trace.id]" }
            rename => { "transaction.id" => "[logx][mysql][transaction.id]" }
            rename => { "url" => "[logx][mysql][url]" }
            rename => { "user" => "[logx][mysql][user]" }
            rename => { "vlan" => "[logx][mysql][vlan]" }
            rename => { "vulnerability" => "[logx][mysql][vulnerability]" }
            rename => { "x509" => "[logx][mysql][x509]" }

        }
        #......................................................................#   
        #Decoding priority
        if ![logx][mysql][label] and [logx][mysql][prio]{
          if [logx][mysql][prio] == 0 {
        	  mutate {
              add_field => {
                "[logx][mysql][label]" => "System"
              }
            }
          }else if [logx][mysql][prio] == 1 {
        	  mutate {
              add_field => {
                "[logx][mysql][label]" => "Error"
              }
            }
          }else if [logx][mysql][prio] == 2 {
        	  mutate {
              add_field => {
                "[logx][mysql][label]" => "Warning"
              }
            }
          } else {
            mutate {
              add_field => {
                "[logx][mysql][label]" => "Note"
              }
            }
          }
        }
        #......................................................................#	   
        #Formatting number values
        if [logx][mysql][pid] {  
          mutate { convert => { "[logx][mysql][pid]" => "integer" } }
        }
        if [logx][mysql][thread] {  
          mutate { convert => { "[logx][mysql][thread]" => "integer" } }
        }
        #......................................................................#
        #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log"]
        }
  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
