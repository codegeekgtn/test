filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-nginx.html (february 2022)
  #http://nginx.org/en/docs/http/ngx_http_core_module.html version 1.21.6 (february 2022)
  #http://nginx.org/en/docs/varindex.html version 1.21.6 (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat nginx module, version 2.0.1
  #Filter Input requirements -> fileset: datatype
  #                             access: plain text
  #                             error: plain text
  #                             ingress-controller: plain text

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "nginx") or ([service][type] and [service][type] == "nginx") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#
    #Parse message field in plain text format, access_log
    if [event][dataset] and [message]{
      if [event][dataset] == "nginx.access" {
          grok {
            match => {
                "message" => [
                "%{IPORHOST:remote_addr} - (-|%{DATA:remote_user}) \[%{GREEDYDATA:time}\] \"%{DATA:request}\" %{INT:status}%{SPACE}(%{INT:bytes_sent})? \"%{DATA:irrelevant}\" \"%{GREEDYDATA:http_user_agent}\"(%{GREEDYDATA:irrelevant})?"
                ]
            } 
          }
        #Decoding request to get method and protocol, according to field names and structure used in access_log
        if [request] {
          grok {
          match => {
              "request" => [
              "%{WORD:request_method} %{DATA:irrelevant} %{WORD:server_protocol}/%{DATA:irrelevant}"
              ]
          } 
        }
        }
      } else if [event][dataset] == "nginx.error" {
        #Parse message field in plain text format, error_log
        grok {
          match => {
              "message" => [
              "%{GREEDYDATA:time} \[%{WORD:level}\] %{INT:pid}#%{INT:tid}: %{GREEDYDATA:error_msg}"
              ]
          } 
        }
      } else {
        #Return the message as is
      }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        #Fields from nginx plain logs
        mutate {
            #Fields from access_log
            rename => { "time" => "[logx][nginx][time]" }
            rename => { "status" => "[logx][nginx][status]" }
            rename => { "bytes_sent" => "[logx][nginx][bytes_sent]" }
            rename => { "http_user_agent" => "[logx][nginx][http_user_agent]" }
            rename => { "request_method" => "[logx][nginx][request_method]" }
            rename => { "server_protocol" => "[logx][nginx][server_protocol]" }
            rename => { "request" => "[logx][nginx][request]" }
            rename => { "remote_addr" => "[logx][nginx][remote_addr]" }
            rename => { "remote_user" => "[logx][nginx][remote_user]" }
            #Fields from error_log
            rename => { "pid" => "[logx][nginx][pid]" }
            rename => { "tid" => "[logx][nginx][tid]" }
            rename => { "error_msg" => "[logx][nginx][error_msg]" }
            rename => { "level" => "[logx][nginx][level]" }
            #Adding message field
            rename => { "message" => "[logx][nginx][message]" }

        }
        mutate { 
        #General fields from ECS
            rename => { "host" => "[logx][nginx][host]" }
            rename => { "service" => "[logx][nginx][service]" }
            rename => { "ecs" => "[logx][nginx][ecs]" }
            rename => { "agent" => "[logx][nginx][agent]" }
            rename => { "fileset" => "[logx][nginx][fileset]" }
            rename => { "event" => "[logx][nginx][event]" }
            rename => { "input" => "[logx][nginx][input]" }
            rename => { "labels" => "[logx][nginx][labels]" }
            rename => { "as" => "[logx][nginx][as]" }
            rename => { "client" => "[logx][nginx][client]" }
            rename => { "cloud" => "[logx][nginx][cloud]" }
            rename => { "code_signature" => "[logx][nginx][code_signature]" }
            rename => { "container" => "[logx][nginx][container]" }
            rename => { "destination" => "[logx][nginx][destination]" }
            rename => { "dll" => "[logx][nginx][dll]" }
            rename => { "dns" => "[logx][nginx][dns]" }
            rename => { "error" => "[logx][nginx][error]" }
            rename => { "file" => "[logx][nginx][file]" }
            rename => { "geo" => "[logx][nginx][geo]" }
            rename => { "hash" => "[logx][nginx][hash]" }
            rename => { "http" => "[logx][nginx][http]" }
            rename => { "interface" => "[logx][nginx][interface]" }
            rename => { "network" => "[logx][nginx][network]" }
            rename => { "observer" => "[logx][nginx][observer]" }
            rename => { "organization" => "[logx][nginx][organization]" }
            rename => { "package" => "[logx][nginx][package]" }
            rename => { "pe" => "[logx][nginx][pe]" }
            rename => { "process" => "[logx][nginx][process]" }
            rename => { "registry" => "[logx][nginx][registry]" }
            rename => { "related" => "[logx][nginx][related]" }
            rename => { "rule" => "[logx][nginx][rule]" }
            rename => { "server" => "[logx][nginx][server]" }
            rename => { "source" => "[logx][nginx][source]" }
            rename => { "threat" => "[logx][nginx][threat]" }
            rename => { "tls" => "[logx][nginx][tls]" }
            rename => { "span.id" => "[logx][nginx][span.id]" }
            rename => { "trace.id" => "[logx][nginx][trace.id]" }
            rename => { "transaction.id" => "[logx][nginx][transaction.id]" }
            rename => { "url" => "[logx][nginx][url]" }
            rename => { "user" => "[logx][nginx][user]" }
            rename => { "vlan" => "[logx][nginx][vlan]" }
            rename => { "vulnerability" => "[logx][nginx][vulnerability]" }
            rename => { "x509" => "[logx][nginx][x509]" }

        }
        #......................................................................#	   
        #Formatting number values
        if [logx][nginx][bytes_sent] {  
          mutate { convert => { "[logx][nginx][bytes_sent]" => "integer" } }
        }
        if [logx][nginx][status] {  
          mutate { convert => { "[logx][nginx][status]" => "integer" } }
        }
        if [logx][nginx][pid] {  
          mutate { convert => { "[logx][nginx][pid]" => "integer" } }
        }
        if [logx][nginx][tid] {  
          mutate { convert => { "[logx][nginx][tid]" => "integer" } }
        }
        #......................................................................#
        #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log","irrelevant"]
        }
  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
