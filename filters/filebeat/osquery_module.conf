filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-osquery.html (march 2022)
  #https://www.elastic.co/guide/en/beats/filebeat/7.13/exported-fields-osquery.html (march 2022)
  #https://osquery.readthedocs.io/en/stable/deployment/logging/ (march 2022)
  #https://osquery.readthedocs.io/en/stable/ (march 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat osquery module, version 2.0.1
  #Filter Input requirements -> fileset: datatype
  #                             result: json

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "osquery") 
  or ([service][type] and [service][type] == "osquery") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#   
    #Adding only JSON files support, plain logs are not supported
    if [message] {
      json {
        source => "message"
        target => "osquery"
      }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        #Fields variants from module
        mutate {
            rename => { "osquery" => "[logx][osquery]" }
            rename => { "osquery.results" => "[logx][osquery]" }
        }

        #Fields from json
        mutate {
            rename => { "[logx][osquery][json]" => "[logx][osquery]" }
        }
        #Fields from json, in case that have a root field called json
        mutate {
            rename => { "json" => "[logx][osquery]" }
        }
        mutate { 
        #General fields from ECS
            rename => { "host" => "[logx][osquery][host]" }
            rename => { "service" => "[logx][osquery][service]" }
            rename => { "ecs" => "[logx][osquery][ecs]" }
            rename => { "agent" => "[logx][osquery][agent]" }
            rename => { "fileset" => "[logx][osquery][fileset]" }
            rename => { "event" => "[logx][osquery][event]" }
            rename => { "input" => "[logx][osquery][input]" }
            rename => { "labels" => "[logx][osquery][labels]" }
            rename => { "as" => "[logx][osquery][as]" }
            rename => { "client" => "[logx][osquery][client]" }
            rename => { "cloud" => "[logx][osquery][cloud]" }
            rename => { "code_signature" => "[logx][osquery][code_signature]" }
            rename => { "container" => "[logx][osquery][container]" }
            rename => { "destination" => "[logx][osquery][destination]" }
            rename => { "dll" => "[logx][osquery][dll]" }
            rename => { "dns" => "[logx][osquery][dns]" }
            rename => { "error" => "[logx][osquery][error]" }
            rename => { "file" => "[logx][osquery][file]" }
            rename => { "geo" => "[logx][osquery][geo]" }
            rename => { "hash" => "[logx][osquery][hash]" }
            rename => { "http" => "[logx][osquery][http]" }
            rename => { "interface" => "[logx][osquery][interface]" }
            rename => { "network" => "[logx][osquery][network]" }
            rename => { "observer" => "[logx][osquery][observer]" }
            rename => { "organization" => "[logx][osquery][organization]" }
            rename => { "package" => "[logx][osquery][package]" }
            rename => { "pe" => "[logx][osquery][pe]" }
            rename => { "process" => "[logx][osquery][process]" }
            rename => { "registry" => "[logx][osquery][registry]" }
            rename => { "related" => "[logx][osquery][related]" }
            rename => { "rule" => "[logx][osquery][rule]" }
            rename => { "server" => "[logx][osquery][server]" }
            rename => { "source" => "[logx][osquery][source]" }
            rename => { "threat" => "[logx][osquery][threat]" }
            rename => { "tls" => "[logx][osquery][tls]" }
            rename => { "span.id" => "[logx][osquery][span.id]" }
            rename => { "trace.id" => "[logx][osquery][trace.id]" }
            rename => { "transaction.id" => "[logx][osquery][transaction.id]" }
            rename => { "url" => "[logx][osquery][url]" }
            rename => { "user" => "[logx][osquery][user]" }
            rename => { "vlan" => "[logx][osquery][vlan]" }
            rename => { "vulnerability" => "[logx][osquery][vulnerability]" }
            rename => { "x509" => "[logx][osquery][x509]" }

            #Rename message field to add it to the structure
            rename => { "message" => "[logx][osquery][message]" }

        }
        #......................................................................#
        #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log","irrelevant"]
        }
  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
