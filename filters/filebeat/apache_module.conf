filter {
  #Fields based on https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/legacy/httpd (february 2022)
  #and https://docs.trafficserver.apache.org/en/9.0.x/admin-guide/logging/examples.en.html#admin-logging-examples-netscape
  #and https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-apache.html
  #and https://httpd.apache.org/docs/2.2/logs.html
  #and filebeat fields.yml version 7.13.4 oss

  #Filebeat apache, apache2 module, version 2.0.1
  #Filter Input requirements -> fileset: datatype
  #                access: plain text
  #                error: plain text

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "apache") 
  or ([service][type] and [service][type] == "apache") 
  or ([event][module] and [event][module] == "apache2") 
  or ([service][type] and [service][type] == "apache2") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    
    #......................................................................#
    #Parse message field, the first two regexp for acces and the last for error
    if [message] {
        grok {
          match => {
              "message" => [
              "%{COMMONAPACHELOG}","%{COMBINEDAPACHELOG}","%{COMMONAPACHELOG} %{GREEDYDATA:irrelevant}","%{COMBINEDAPACHELOG}  %{GREEDYDATA:irrelevant}",
              "%{IPORHOST:clientip} %{HTTPDUSER:ident} %{HTTPDUSER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\"(\s)?(%{NUMBER:response})?(\s)?(?:%{NUMBER:bytes}|-)?",
              "\[%{GREEDYDATA:timestamp}\]%{SPACE}\[%{WORD:severity}\]%{SPACE}\[(client%{SPACE})?%{IPORHOST:clientip}\] %{GREEDYDATA:msg}"
              ]
          } 
        }
    }
    #......................................................................#	   
    #Formatting number values
    if [bytes] {
        mutate { convert => { "bytes" => "integer" } }
    }
    if [response] {
        mutate { convert => { "response" => "integer" } }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        mutate { 
            #General fields from ECS
            rename => { "host" => "[logx][apache][host]" }
            rename => { "service" => "[logx][apache][service]" }
            rename => { "ecs" => "[logx][apache][ecs]" }
            rename => { "agent" => "[logx][apache][agent]" }
            rename => { "fileset" => "[logx][apache][fileset]" }
            rename => { "event" => "[logx][apache][event]" }
            rename => { "input" => "[logx][apache][input]" }
            rename => { "labels" => "[logx][apache][labels]" }
            rename => { "as" => "[logx][apache][as]" }
            rename => { "client" => "[logx][apache][client]" }
            rename => { "cloud" => "[logx][apache][cloud]" }
            rename => { "code_signature" => "[logx][apache][code_signature]" }
            rename => { "container" => "[logx][apache][container]" }
            rename => { "destination" => "[logx][apache][destination]" }
            rename => { "dll" => "[logx][apache][dll]" }
            rename => { "dns" => "[logx][apache][dns]" }
            rename => { "error" => "[logx][apache][error]" }
            rename => { "file" => "[logx][apache][file]" }
            rename => { "geo" => "[logx][apache][geo]" }
            rename => { "hash" => "[logx][apache][hash]" }
            rename => { "http" => "[logx][apache][http]" }
            rename => { "interface" => "[logx][apache][interface]" }
            rename => { "network" => "[logx][apache][network]" }
            rename => { "observer" => "[logx][apache][observer]" }
            rename => { "organization" => "[logx][apache][organization]" }
            rename => { "package" => "[logx][apache][package]" }
            rename => { "pe" => "[logx][apache][pe]" }
            rename => { "process" => "[logx][apache][process]" }
            rename => { "registry" => "[logx][apache][registry]" }
            rename => { "related" => "[logx][apache][related]" }
            rename => { "rule" => "[logx][apache][rule]" }
            rename => { "server" => "[logx][apache][server]" }
            rename => { "source" => "[logx][apache][source]" }
            rename => { "threat" => "[logx][apache][threat]" }
            rename => { "tls" => "[logx][apache][tls]" }
            rename => { "span.id" => "[logx][apache][span.id]" }
            rename => { "trace.id" => "[logx][apache][trace.id]" }
            rename => { "transaction.id" => "[logx][apache][transaction.id]" }
            rename => { "url" => "[logx][apache][url]" }
            rename => { "user" => "[logx][apache][user]" }
            rename => { "vlan" => "[logx][apache][vlan]" }
            rename => { "vulnerability" => "[logx][apache][vulnerability]" }
            rename => { "x509" => "[logx][apache][x509]" }

            #Fields from apache module
            rename => { "[apache][access]" => "[logx][apache][access]" }
            rename => { "[apache][error]" => "[logx][apache][error]" }
            rename => { "[apache2][access]" => "[logx][apache2][access]" }
            rename => { "[apache2][error]" => "[logx][apache2][error]" }
            

            #Fields from apache message
            rename => { "httpversion" => "[logx][apache][httpversion]" }
            rename => { "verb" => "[logx][apache][method]" }
            rename => { "response" => "[logx][apache][response]" }
            rename => { "bytes" => "[logx][apache][bytes]" }
            rename => { "clientip" => "[logx][apache][src_ip]" }
            rename => { "timestamp" => "[logx][apache][client_request_timestamp]" }
            rename => { "auth" => "[logx][apache][auth]" }
            rename => { "ident" => "[logx][apache][ident]" }
            rename => { "request" => "[logx][apache][request]" }
            rename => { "rawrequest" => "[logx][apache][rawrequest]" }
            rename => { "referrer" => "[logx][apache][referrer]" }
            rename => { "message" => "[logx][apache][message]" }
            rename => { "msg" => "[logx][apache][msg]" }
            rename => { "severity" => "[logx][apache][severity]" }

        }
    
    #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","path","tags","log","irrelevant"]
        }

  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
