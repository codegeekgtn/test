filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-mongodb.html (february 2022)
  #https://docs.mongodb.com/manual/reference/log-messages/ current version 5.0 (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat mongodb module, version 2.0.1
  #Supports json input format only, starting in MongoDB 4.4 logs are in json format
  
  #Filter Input requirements -> fileset: datatype
  #                             log: json

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }
  
  if ([event][module] and [event][module] == "mongodb") 
  or ([service][type] and [service][type] == "mongodb") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#   
    #Adding only JSON files support, plain logs are not supported
    if [message]{  
      json {
        source => "message"
        target => "mongodb"
      }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure
        mutate { 
            #General fields from ECS
            rename => { "host" => "[logx][mongodb][host]" }
            rename => { "service" => "[logx][mongodb][service]" }
            rename => { "ecs" => "[logx][mongodb][ecs]" }
            rename => { "agent" => "[logx][mongodb][agent]" }
            rename => { "fileset" => "[logx][mongodb][fileset]" }
            rename => { "event" => "[logx][mongodb][event]" }
            rename => { "input" => "[logx][mongodb][input]" }
            rename => { "labels" => "[logx][mongodb][labels]" }
            rename => { "as" => "[logx][mongodb][as]" }
            rename => { "client" => "[logx][mongodb][client]" }
            rename => { "cloud" => "[logx][mongodb][cloud]" }
            rename => { "code_signature" => "[logx][mongodb][code_signature]" }
            rename => { "container" => "[logx][mongodb][container]" }
            rename => { "destination" => "[logx][mongodb][destination]" }
            rename => { "dll" => "[logx][mongodb][dll]" }
            rename => { "dns" => "[logx][mongodb][dns]" }
            rename => { "error" => "[logx][mongodb][error]" }
            rename => { "file" => "[logx][mongodb][file]" }
            rename => { "geo" => "[logx][mongodb][geo]" }
            rename => { "hash" => "[logx][mongodb][hash]" }
            rename => { "http" => "[logx][mongodb][http]" }
            rename => { "interface" => "[logx][mongodb][interface]" }
            rename => { "network" => "[logx][mongodb][network]" }
            rename => { "observer" => "[logx][mongodb][observer]" }
            rename => { "organization" => "[logx][mongodb][organization]" }
            rename => { "package" => "[logx][mongodb][package]" }
            rename => { "pe" => "[logx][mongodb][pe]" }
            rename => { "process" => "[logx][mongodb][process]" }
            rename => { "registry" => "[logx][mongodb][registry]" }
            rename => { "related" => "[logx][mongodb][related]" }
            rename => { "rule" => "[logx][mongodb][rule]" }
            rename => { "server" => "[logx][mongodb][server]" }
            rename => { "source" => "[logx][mongodb][source]" }
            rename => { "threat" => "[logx][mongodb][threat]" }
            rename => { "tls" => "[logx][mongodb][tls]" }
            rename => { "span.id" => "[logx][mongodb][span.id]" }
            rename => { "trace.id" => "[logx][mongodb][trace.id]" }
            rename => { "transaction.id" => "[logx][mongodb][transaction.id]" }
            rename => { "url" => "[logx][mongodb][url]" }
            rename => { "user" => "[logx][mongodb][user]" }
            rename => { "vlan" => "[logx][mongodb][vlan]" }
            rename => { "vulnerability" => "[logx][mongodb][vulnerability]" }
            rename => { "x509" => "[logx][mongodb][x509]" }

        }
        #Fields from mongodb json logs
        mutate {
            rename => { "mongodb" => "[logx][mongodb]" }
        }
        #Rename to more readable mongodb fields
        mutate {
            rename => { "[logx][mongodb][t]" => "[logx][mongodb][timestamp]" }
            rename => { "[logx][mongodb][c]" => "[logx][mongodb][component]" }
            rename => { "[logx][mongodb][ctx]" => "[logx][mongodb][context]" }
            rename => { "message" => "[logx][mongodb][message]" }
        }
        #......................................................................#   
        #Decoding severity
        if [logx][mongodb][s] {
          if [logx][mongodb][s] == "F" {
        	  mutate {
              add_field => {
                "[logx][mongodb][severity]" => "Fatal"
              }
            }	
          }
          else if [logx][mongodb][s] == "E" {
        	  mutate {
              add_field => {
                "[logx][mongodb][severity]" => "Error"
              }
            }	
          }
          else if [logx][mongodb][s] == "W" {
        	  mutate {
              add_field => {
                "[logx][mongodb][severity]" => "Warning"
              }
            }	
          }
          else if [logx][mongodb][s] == "I" {
        	  mutate {
              add_field => {
                "[logx][mongodb][severity]" => "Informational"
              }
            }	
          }
          else {
        	  mutate {
              add_field => {
                "[logx][mongodb][severity]" => "Debug"
              }
            }	
          }
        }
        #......................................................................#
        #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log","[logx][mongodb][s]"]
        }

  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
