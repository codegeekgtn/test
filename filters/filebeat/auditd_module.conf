filter {
  #Fields based on https://www.elastic.co/guide/en/beats/filebeat/7.13/filebeat-module-auditd.html (february 2022)
  #https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/sec-understanding_audit_log_files (february 2022)
  #https://linux.die.net/man/5/auditd.conf (february 2022)
  #and filebeat fields.yml version 7.13.4 oss
  #As the docs says this module work with one event per line, filebeat must ensure to send one event per line.
  
  #Filebeat auditd module, version 2.0.1
  #Filter Input requirements -> fileset: datatype
  #                             log: plain text

  split {
    field => "message"
    terminator => "<utm-log-separator>"
  }
  json {
    source => "message"
  }

  if ([event][module] and [event][module] == "auditd") or ([service][type] and [service][type] == "auditd") {
    #Generating dataType and dataSource fields
        mutate {
            add_field => { "dataSource" => "%{[host][hostname]}" }
        }
    if [event][module] {
        mutate {
            add_field => { "dataType" => "%{[event][module]}" }
        }
    } else if [service][type] {
        mutate {
            add_field => { "dataType" => "%{[service][type]}" }
        }
    }
    #......................................................................#
    #Then add all possible fields to the json tree structure

        #Fields from module
        mutate {
            rename => { "auditd" => "[logx][auditd]" }
        }
        mutate { 
        #General fields from ECS
            rename => { "host" => "[logx][auditd][host]" }
            rename => { "service" => "[logx][auditd][service]" }
            rename => { "ecs" => "[logx][auditd][ecs]" }
            rename => { "agent" => "[logx][auditd][agent]" }
            rename => { "fileset" => "[logx][auditd][fileset]" }
            rename => { "event" => "[logx][auditd][event]" }
            rename => { "input" => "[logx][auditd][input]" }
            rename => { "labels" => "[logx][auditd][labels]" }
            rename => { "as" => "[logx][auditd][as]" }
            rename => { "client" => "[logx][auditd][client]" }
            rename => { "cloud" => "[logx][auditd][cloud]" }
            rename => { "code_signature" => "[logx][auditd][code_signature]" }
            rename => { "container" => "[logx][auditd][container]" }
            rename => { "destination" => "[logx][auditd][destination]" }
            rename => { "dll" => "[logx][auditd][dll]" }
            rename => { "dns" => "[logx][auditd][dns]" }
            rename => { "error" => "[logx][auditd][error]" }
            rename => { "file" => "[logx][auditd][file]" }
            rename => { "geo" => "[logx][auditd][geo]" }
            rename => { "hash" => "[logx][auditd][hash]" }
            rename => { "http" => "[logx][auditd][http]" }
            rename => { "interface" => "[logx][auditd][interface]" }
            rename => { "network" => "[logx][auditd][network]" }
            rename => { "observer" => "[logx][auditd][observer]" }
            rename => { "organization" => "[logx][auditd][organization]" }
            rename => { "package" => "[logx][auditd][package]" }
            rename => { "pe" => "[logx][auditd][pe]" }
            rename => { "process" => "[logx][auditd][process]" }
            rename => { "registry" => "[logx][auditd][registry]" }
            rename => { "related" => "[logx][auditd][related]" }
            rename => { "rule" => "[logx][auditd][rule]" }
            rename => { "server" => "[logx][auditd][server]" }
            rename => { "source" => "[logx][auditd][source]" }
            rename => { "threat" => "[logx][auditd][threat]" }
            rename => { "tls" => "[logx][auditd][tls]" }
            rename => { "span.id" => "[logx][auditd][span.id]" }
            rename => { "trace.id" => "[logx][auditd][trace.id]" }
            rename => { "transaction.id" => "[logx][auditd][transaction.id]" }
            rename => { "url" => "[logx][auditd][url]" }
            rename => { "user" => "[logx][auditd][user]" }
            rename => { "vlan" => "[logx][auditd][vlan]" }
            rename => { "vulnerability" => "[logx][auditd][vulnerability]" }
            rename => { "x509" => "[logx][auditd][x509]" }

            #Rename message field to add it to the structure
            rename => { "message" => "[logx][auditd][message]" }

        }
        #......................................................................#
        #Finally, remove unnecessary fields
        mutate {
            remove_field => ["@version","tags","log","irrelevant"]
        }
  }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["headers"]
   }
}
